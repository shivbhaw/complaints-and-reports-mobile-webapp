/*
 * File: app/controller/LogInControl.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Incident.controller.LogInControl', {
    extend: 'Ext.app.Controller',
    alias: 'controller.logincontrol',

    config: {
    },

    launch: function() {

    },

    init: function(application) {

    },

    executeLogIn: function() {
        //to do ajax call to server to jsp file to get authentication
        var logindetails = Ext.getCmp('loginfieldsetid');
        var main = this.fn();
        Ext.getCmp('usernameid').blur();
        Ext.getCmp('passwordid').blur();

        var requestresponse = Ext.Ajax.request({
            url: Incident.app.getController('GlobalControl').Var('sett', 'URL-PREFEX') + '/json_dependency_files/success/success.json',//main.Var('sett', 'url-prefex') + '/servlet/login?Action=tabletlogin&Username=' + Ext.getCmp('usernameid').getValue() + '&Password=' + Ext.getCmp('passwordid').getValue(),
            success: function(response, opts) {
                var json;
                try
                {
                    json = Ext.decode(response.responseText);
                }
                catch(err)
                {
                    main.customMsg(fn.Var('stat', 'error_title'),fn.Var('stat', 'error_server'), 1);
                    return;
                }
                if(json.type === 'error_login' || json.type === 'error')
                {
                    main.customMsg(json.title, json.message, 1);
                    return;
                }
                else if(json.type === 'succes')
                {
                    Ext.getStore('templatestoreid').load();
                    main.Var('stat', 'loggedIn', 'true');

                    if(Ext.getCmp('usernameid').getValue() !== 'guest')
                    {
                        main.Var('stat', 'currentusername', Ext.getCmp('usernameid').getValue());
                        main.Var('stat', 'currentpassword', Ext.getCmp('passwordid').getValue());
                        main.Var('sett', 'username-log', main.Var('stat', 'text_current_user') + ': ' + Ext.getCmp('usernameid').getValue());
                    }
                    else
                    {
                        main.Var('stat', 'currentusername', 'false');
                        main.Var('stat', 'currentpassword', 'false');
                        main.Var('sett', 'username-log', 'false');
                    }
                    var homescreenvar = main.getHomescreen();
                    main.fixStaticText(2);
                    main.switchCard(Ext.Viewport, homescreenvar, true); 
                }
            },
            failure: function(response, opts) {
                main.customMsg(fn.Var('stat', 'error_title'),fn.Var('stat', 'error_server'), 1);
            },
            scope: this
        });
    },

    executeLogOut: function() {

        Ext.Ajax.request({
            url: 'http://google.com',//this.fn().Var('sett', 'url-prefex') + '/servlet/login?Action=logout',
            scope: this
        });

        var fn = this.fn();
        Ext.getCmp('logoutbuttonid').hide();
        fn.Var('stat', 'loggedIn', 'false');
        fn.fixStaticText();
        fn.switchCard(Ext.Viewport, fn.getLoginview(), false);
        Ext.getCmp('usernameid').setValue('');
        Ext.getCmp('passwordid').setValue('');
        fn.Var('stat', 'currentusername', 'false');
        fn.Var('stat', 'currentpassword', 'false');
        fn.Var('sett', 'username-log', 'false');
    },

    onSettingsEnterExit: function(exit) {
        var fn = this.fn();
        if(!exit)
        {
            fn.Var('stat','currentscreen', Ext.Viewport.getActiveItem().getItemId());
            var settingsview = this.fn().getSettingsview();
            this.settingsFilter();
            this.fn().fixStaticText(1);
            if(this.fn().Var('stat', 'loggedIn') === 'true')
            {
                Ext.getCmp('logoutbuttonid').show();
            }
            else
            {
                Ext.getCmp('logoutbuttonid').hide();
            }
            this.fn().switchCard(Ext.Viewport, settingsview, true);
        }
        else
        {
            if(this.fn().getSettingsview().getActiveItem().getItemId() !== 'mainsettingsviewid')
            {
                this.fn().switchCard(this.fn().getSettingsview(), Ext.getCmp('mainsettingsviewid'), false);
            }
            else
            {
                this.fn().switchCard(Ext.Viewport, fn.Var('stat','currentscreen'), false);
            }
        }
    },

    settingsControl: function(id, record) {
        var fn = this.fn();
        var name = record.data.localid;
        if(id === 'settingslistid')
        {
            if(name === 'LANGNAME')
            {
                fn.Var('g', 'langsecondary', 'true');
                Ext.getStore('auxstoreid').load();
                fn.switchCard(fn.getSettingsview(),Ext.getCmp('langviewid'), true);
            }
            else if(name === 'URL-PREFEX')
            {
                fn.customMsg(fn.Var('stat', 'url_change_title'), fn.Var('stat', 'url_change_body'), 2, function(answer){
                    if(answer === 'yes')
                    {
                        fn.Var('sett', 'url-prefex', '');
                        fn.launch();
                    }
                }, this);
            }
            else
            {
                if(record.data.localid === 'USERNAME-LOG')
                {
                    console.log('why yes indeed, that IS you!');
                }
                else
                console.log('fn: settingsControl: settingslistid: id(nf)', record);
            }
        }
        else if(id === 'langlistid')
        {
            fn.Var('sett', 'langvalue', record.data.id);
            fn.addLanguages();
            fn.switchCard(fn.getSettingsview(), Ext.getCmp('mainsettingsviewid'), false);
        }
        else
        {
            console.log('fn: settingsControl: id(nf)');
        }
    },

    settingsFilter: function() {

        //Filters out settingsstore to either
        //show settings or show all

        var store = Ext.getStore('settingsstoreid');
        var isDebug = this.fn().Var('g', 'debug') === 'true';
       
        if(store.getFilters().length === 0)
        {
            store.clearFilter();
            store.filter(function(items){
                if(!isDebug)
                {
                    if(items.data.localid === 'USERNAME-LOG' && items.data.value === 'false')
                    {
                        return false;
                    }
                    else if(items.data.localid === 'LANGVALUE')
                    {
                        return false;
                    }
                    else if(items.data.localid === 'URL-PREFEX')
                    {
	                    return false;
                    }
                }
                return true;
            });
        }
    },

    fn: function() {
        return Incident.app.getController('GlobalControl');
    }

});