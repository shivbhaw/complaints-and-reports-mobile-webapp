/*
 * File: app/controller/FieldsControl.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Incident.controller.FieldsControl', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            singleview: {
                autoCreate: true,
                selector: 'singleview',
                xtype: 'singleview'
            },
            multiview: {
                autoCreate: true,
                selector: 'multiview',
                xtype: 'multiview'
            },
            thankyouview: {
                autoCreate: true,
                selector: 'thankyouview',
                xtype: 'thankyouview'
            }
        }
    },

    init: function(application) {

    },

    launch: function() {

    },

    onDataStores: function(id, searchid, parentid) {
        //This is the datastores, where the new data is collected from the system
        //via the use of a store, and the new data is shown.

        //also in here is the use of the searchId, the value used when searching for data in a list
        //also the values for the parent/child field are found and inputted into the server
        var fn = this.fn();
        var type = 0;
        console.log(id);
        console.log(type);
        if(id.constructor !== Array)
        {
            var type = fn.Var('g', id);
        }
        else
        {
            type = id;
        }
        var lang = '&rt.lang.id='+ fn.Var('sett', 'langvalue');
        if(type.constructor !== Array)
        {
        	
        	var newurl = fn.Var('sett', 'url-prefex') +'/json_dependency_files/lists/'+type+'.json';
            //var newurl = fn.Var('sett', 'url-prefex') + '/servlet/reporttablet?rt.action=3' + lang + '&rt.ct.id=' + type;
        }
        else
        {
	        var newurl = fn.Var('sett', 'url-prefex') +'/json_dependency_files/lists/'+type+'.json';
            //var newurl = fn.Var('sett', 'url-prefex') + '/servlet/reporttablet?rt.action=4' + lang + '&rt.pt.id=' + type;
        }

        if(searchid)
        {
            //newurl = newurl + '&rt.search.q=' + searchid;
        }
        var parentvalues = ''; //= this.getParentValues(); // TODO

        if(parentid !== undefined)
        {
            //newurl = newurl + '&rt.cte.p.id=' + parentid;
        }

        var datastore = Ext.getStore('datastoreid');
        datastore.setProxy({
            type: 'ajax',
            url: newurl,
            reader: {
                type: 'json',
                rootProperty: 'data'
            },
            listeners: {
                'exception': fn.customMsg
            }
        });

        datastore.setSorters();
        datastore.setGroupField();
        datastore.load();
    },

    textareaControl: function(obj, eOpts) {
        setTimeout(function(){
            if(obj.getValue() === '')
            objvalue = '';
            else
            var objvalue = obj.getValue();
            var objlength = objvalue.split('\n').length;
            var objec /*element config*/ =  obj.getComponent().innerElement.dom.children[0];
            if(objlength < 6)
            {
                if(Ext.os.is.Tablet)
                obj.setHeight(117);
                else
                obj.setHeight(197);
            }
            else
            {
                if(Ext.os.is.Tablet)
                obj.setHeight(117 + 15 + ((objlength - 6)*25));
                else
                obj.setHeight(197 + 15 + ((objlength - 6)*25));
            }

            /*
            if(objec.scrollHeight > objec.offsetHeight)
            {
            obj.setHeight(objelementconfig.scrollHeight);
            }*/
        }, 100);
    },

    redoNumberField: function(obj, e, eOpts) {
        var numbers = String(obj.getValue()).split(',');
        obj.setValue(numbers.join(''));
    },

    fixItemId: function() {
        //to remove this function from within here and the entire application
        return;
    },

    fixFieldTitle: function(type, value) {
        Ext.getCmp(type+'titleid').setHtml('<h4><div class="x-form-fieldset-title x-docked-top" id="list-title"><div class="x-innerhtml " id="list-title-inner">'+value+'</div></div></h4>');

    },

    onSingle: function(id, type, name, record) {
        if(type.constructor === Array && type.length !== 1)
        {
            if(name === 'singlefieldmask')
            {
                var labelname = Ext.getCmp(id).getLabel();
                this.fixFieldTitle('singlemid', labelname);
                var links = this.fn().Var('g', id);
                var isNotOther = true;
                for(var i in links)
                {
                    if(links[i] === 4)
                    {
                        isNotOther = false;
                    }
                }

                if(isNotOther)
                {
                    this.fixFieldTitle('singlelist', this.getLinkNames([links[0]])[0].value);
                    var data = Ext.getCmp('singlefield'+id).getData();
                    console.log(data);
                    if(data)
                    {
                        try
                        {
                            if(data[0].data.type)
                            {
                                data = data[0].data.type;
                            }
                        }
                        catch(err)
                        {
                            if(data[0].type)
                            {
                                data = data[0].type;
                            }
                        }
                    }
                    console.log(data, links[0]);
                    this.onLink(id, 'single-enter.mid', {data: {type: data ? data : links[0]}});
                }
                else
                {
                    this.onLink(id, 'single-enter.mid', {data: {type: 4}});
                }
            }
            else if(name === 'singlebackbuttonid' || name === 'singleclearbuttonid')
            {
                if(this.getSingleview().getActiveItem().id === 'singlemidview')
                {
                    if(name === 'singlebackbuttonid')
                    {
                        this.onList(id, 'single-back');
                    }
                    else if(name === 'singleclearbuttonid')
                    {
                        this.onList(id, 'single-clear');
                    }
                }
                else
                {
                    if(name === 'singlebackbuttonid')
                    {
                        this.onLink(id, 'single-back');
                    }
                    else if(name === 'singleclearbuttonid')
                    {
                        this.onList(id, 'single-clear');
                    }

                }
            }
            else if(name === 'singleotherbuttonid')
            {
                this.onLink(id, 'single-other');
            }
            else if(name === 'singlelistid')
            {
                //var linkname = this.getLinkNames([record.data.type])[0].value;
                this.onList(id, 'single-add', {data:{id: record.data.id, value: /*linkname + ": " + */record.data.value, type: record.data.type, parent_id: record.data.parent_id, parent_value: record.data.parent_value, uniqueId: record.data.uniqueId}});//record);
            }
            else if(name === 'singlemidlistid')
            {
                this.fixFieldTitle('singlelist', record.data.value.split('(')[0]);
                this.onLink(id, 'single-enter', record);
            }

        }
        else
        {
            if(name === 'singlefieldmask')
            {
                var labelname = Ext.getCmp(id).getLabel();
                this.fixFieldTitle('singlelist', labelname);
                this.onList(id, 'single');
            }
            else if(name === 'singlebackbuttonid')
            {
                this.onList(id, 'single-back');
            }
            else if(name === 'singleclearbuttonid')
            {
                this.onList(id, 'single-clear');
            }
            else if(name === 'singlelistid')
            {
                this.onList(id, 'single-add', record);
            }
        }


    },

    onMulti: function(id, type, name, record) {
        if(type.constructor === Array && type.length !== 1)
        {
            if(name === 'multi')
            {
                var labelname = Ext.getCmp(id).getLabel();
                this.fixFieldTitle('multimid', labelname);
                this.onLink(id, 'multi-enter.mid', record);
            }
            else if(name === 'multimask')
            {
                var labelname = Ext.getCmp(id).getLabel();
                this.fixFieldTitle('multimid', labelname);
                this.onLink(id, 'multi-enter.mid');
            }
            else if(name === 'multimidlistid')
            {
                this.fixFieldTitle('multilist', record.data.value.split('(')[0]);
                this.onLink(id, 'multi-enter', record);
            }
            else if(name === 'multibackbuttonid' || name === 'multiokbuttonid')
            {
                if(Ext.os.is.Tablet)
                {
                    if(name === 'multibackbuttonid')
                    {
                        this.onTablet(id,'back');
                    }
                    else if(name === 'multiokbuttonid')
                    {
                        this.onTablet(id, 'ok');
                    }
                }
                else
                {
                    if(this.getMultiview().getActiveItem().id === 'multimidview')
                    {
                        if(name === 'multibackbuttonid')
                        {
                            this.onList(id, 'multi-back');
                        }
                        else if(name === 'multiokbuttonid')
                        {
                            //console.log('multiokbuttonid');
                            this.onLink(id, 'multi-ok');
                            //this.onList(id, 'multi-clear');
                        }
                    }
                    else
                    {
                        if(name === 'multibackbuttonid')
                        {
                            this.onLink(id, 'multi-back');
                        }
                        else if(name === 'multiokbuttonid')
                        {
                            //console.log('multiokbuttonid');
                            this.onLink(id, 'multi-ok.update');
                            //this.onList(id, 'multi-save');
                        }

                    }
                }
            }
            else if('multiotherbuttonid')
            {
                this.onLink(id, 'other-add');
            }
            else 
            {
                console.log(id, type, name, record);
            }
        }
        else
        {
            if(name === 'multi')
            {
                var labelname = Ext.getCmp(id).getLabel();
                this.fixFieldTitle('multilist', labelname);
                this.onList(id, 'multi');
            }
            else if(name === 'multimask')
            {
                var labelname = Ext.getCmp(id).getLabel();
                this.fixFieldTitle('multilist', labelname);
                this.onList(id, 'multi');
            }
            else if(name === 'multibackbuttonid')
            {
                this.onList(id, 'multi-back');
            }
            else if(name === 'multiokbuttonid')
            {
                this.onList(id, 'multi-save');
            }
        }
    },

    onList: function(id, aux, record, listtype) {
        var fn = this.fn();
        var type = aux.split('-')[0];
        var aux = aux.split('-')[1];
        if(type === 'single')
        {
            if(Ext.getCmp('singlesearchfieldid'))
            Ext.getCmp('singlesearchfieldid').setValue('');
            if(aux)
            {
                if(aux === 'clear')
                {
                    Ext.getStore('datastoreid').clearFilter();
                    Ext.getStore('datastoreid').removeAll();
                    var childid = this.fn().Var('g', 'c'+id);
                    if(childid !== 'fail')
                    {
                        var childfield = Ext.getCmp('singlefield'+childid);
                        var childfielddata = childfield.getData();
                        if(childfield.getData() !== null)
                        {
                            this.onList(childid, 'single-clear');
                        }
                    }
                    Ext.getCmp('singlefield' + id).setData(null);
                    Ext.getCmp('singlefield' + id).setValue('');
                    this.fixClearIcons(id, 'single');
                    Ext.getCmp('singleclearbutton'+id).hide();
                    fn.switchCard(Ext.Viewport, fn.getCanvas(), false);
                }
                else if(aux === 'back')
                {
                    Ext.getStore('datastoreid').clearFilter();
                    Ext.getStore('datastoreid').removeAll();
                    fn.switchCard(Ext.Viewport, fn.getCanvas(), false);
                }
                else if(aux === 'add')
                {
                    Ext.getStore('datastoreid').clearFilter();
                    Ext.getStore('datastoreid').removeAll();
                    Ext.getCmp('singleclearbutton'+id).show();
                    Ext.getCmp('singlefield' + id).setData([record]);
                    Ext.getCmp('singlefield' + id).setValue(record.data.value);
                    this.fixClearIcons(id, 'single');
                    fn.switchCard(Ext.Viewport, fn.getCanvas(), false);
                }
                else if(aux === 'parent')
                {
                    var pid = this.fn().Var('g', 'p'+id);
                    console.log(pid);
                    if(pid !== 'fail' && pid !== null)
                    {
                        var parentid = 'id_' + pid;
                        var parentfield = Ext.getCmp('singlefield'+parentid);
                        var parentdata = parentfield.getData();
                        if(parentdata)
                        {
                            console.log(parentdata);
                            var parentvalueid = parentdata[0].data.id;
                            return parentvalueid;
                        }
                        else
                        {
                            this.fn().customMsg(this.fn().Var('stat', 'error_parent_title'),this.fn().Var('stat', 'error_parent_message') + Ext.getCmp(parentid).getLabel());
                            return 'fail';
                        }
                    }
                    return undefined;
                }

            }
            else
            {
                //init
                var singlepanel = this.getSingleview();
                this.fixItemId(id);
                var parentvalue = this.onList(id, 'single-parent');
                //removes selected
                var singlelist = Ext.getCmp('singlelistid');

                if(Ext.getCmp('singlefield'+id).getData() === null)
                {
                    Ext.getCmp('singleclearbuttonid').hide();
                }
                else
                {
                    Ext.getCmp('singleclearbuttonid').show();
                }
                singlelist.deselectAll();

                if(listtype)
                this.fixTabletPanels(true);
                else
                this.fixTabletPanels();

                if(parentvalue !== 'fail')
                {
                    if(listtype)
                    {
                        this.onDataStores([listtype], undefined, parentvalue);
                    }
                    else
                    {
                        this.onDataStores(id, undefined, parentvalue);   
                    }

                    //if data to select, will be newly selceted
                    var data = Ext.getCmp('singlefield' + id).getData();
                    if(listtype && data)
                    {
                        try
                        {
                            if(listtype !== data[0].data.type)
                            {
                                data = null;
                            }
                        }
                        catch(err)
                        {
                            if(listtype !== data[0].type)
                            {
                                data = null;
                            }
                        }
                        this.fixTabletPanels(true, true);
                    }
                    if(data)
                    {
                        Ext.getStore('datastoreid').on('load', function(){

                            if(data[0].data)
                            {
                                if(data[0].data.type !== 4)
                                fn.dataTransfer(id, data, singlelist, 'select');//'select', singlelist, data);
                            }
                            else
                            {
                                if(data[0].type !== 4)
                                fn.dataTransfer(id, data, singlelist, 'select');//'select', singlelist, data);
                            }
                            fn.switchCard(Ext.getCmp('singlelistview'), 'singleid', true);
                            if(!Ext.os.is.Tablet)
                            fn.switchCard(singlepanel, 'singlelistview', true);
                            Ext.getCmp('singleclearbutton'+id).show();
                            if(!listtype)
                            {
                                fn.switchCard(Ext.Viewport, singlepanel, true);
                            }
                        }, this, {single: true});
                        }
                        else
                        {
                            fn.switchCard(Ext.getCmp('singlelistview'), 'singleid', true);
                            if(!Ext.os.is.Tablet)
                            fn.switchCard(singlepanel, 'singlelistview', true);
                            if(!listtype)
                            {
                                Ext.getCmp('singleclearbutton'+id).hide();
                                fn.switchCard(Ext.Viewport, singlepanel, true);
                            }
                            else
                            {
                                this.fixTabletPanels(true, true);
                            }
                        }

                    }
                    setTimeout(function(){    
                        Ext.getCmp('singleid').getScrollable().getScroller().scrollTo(0,0,true);
                    }, 300);
                }
            }
            else if(type === 'multi')
            {
                if(Ext.getCmp('multisearchfieldid'))
                Ext.getCmp('multisearchfieldid').setValue('');
                if(aux)
                {
                    if(aux === 'back')
                    {
                        Ext.getStore('datastoreid').removeAll();
                        Ext.getStore('datastoreid').clearFilter();
                        fn.switchCard(Ext.Viewport, fn.getCanvas(), false);
                    }
                    else if(aux === 'save')
                    {
                        var multilist = Ext.getCmp('multilistid');
                        var selection = multilist.getSelection();
                        var multistore = Ext.getStore('multistore'+id);
                        Ext.getStore('datastoreid').clearFilter();
                        Ext.getStore('datastoreid').removeAll();
                        multistore.removeAll();
                        fn.dataTransfer(id, selection, multistore, 'add');
                        if(this.fn().Var('g', 'c'+id) !== 'fail')
                        {
                            this.onList(id, 'multi-disclose.parent');
                        }
                        this.onList(id, 'multi-fix');
                        fn.switchCard(Ext.Viewport, fn.getCanvas(), false);
                    }
                    else if(aux === 'disclose')
                    {

                        if(this.fn().Var('g', 'c'+id) !== 'fail')
                        {
                            this.onList(id, 'multi-disclose.parent', record, listtype);
                        }
                        var store = Ext.getStore('multistore'+id);
                        fn.dataTransfer(id, store, record, 'remove');
                        this.onList(id, 'multi-fix');
                    }
                    else if(aux === 'disclose.parent')
                    {
                        if(!record)
                        {

                            var childid = this.fn().Var('g', 'c'+id);
                            var childfield = Ext.getStore('multistore'+childid);
                            var parentfield = Ext.getStore('multistore'+id);
                            var arr = [];
                            for(var i in childfield.data.all)
                            {
                                var child = childfield.data.all[i];
                                var isTrue = false;
                                for(var j in parentfield.data.all)
                                {
                                    var parent = parentfield.data.all[j];
                                    if(child.data.parent_id === parent.data.id)
                                    {
                                        isTrue = true;
                                        break;
                                    }

                                }
                                if(!isTrue)
                                {
                                    arr[arr.length] = child;
                                    if(this.fn().Var('g', 'c'+childid) !== 'fail')
                                    {
                                        this.onList(childid, 'multi-disclose.parent', child, listtype);
                                    }
                                }

                            }
                            fn.dataTransfer(id, Ext.getStore('multistore'+childid), arr, 'remove');
                            this.onList(childid, 'multi-fix');
                        }
                        else
                        {
                            var childid = this.fn().Var('g', 'c'+id);
                            var childstore = Ext.getStore('multistore'+childid);
                            var arr = [];
                            for(var i in childstore.data.all)
                            {
                                var childdata = childstore.data.all[i].data;
                                if(childdata.parent_id === record.data.id)
                                {
                                    arr[arr.length] = childstore.data.all[i];
                                    if(this.fn().Var('g', 'c'+childid) !== 'fail')
                                    {
                                        this.onList(childid, 'multi-disclose.parent', childstore.data.all[i], listtype);
                                    }
                                }
                            }
                            fn.dataTransfer(id, Ext.getStore('multistore'+childid), arr, 'remove');
                            this.onList(childid, 'multi-fix');
                        }
                    }
                    else if(aux === 'fix')
                    {
                        if(Ext.getStore('multistore'+id).data.all.length > 0)
                        {
                            Ext.getCmp('multitext'+id).setHidden(true);
                        }
                        else
                        {
                            Ext.getCmp('multitext'+id).setHidden(false);
                        }
                    }
                    else if(aux === 'parent')
                    {
                        if(this.fn().Var('g', 'p'+id) === 'fail' || this.fn().Var('g', 'p'+id) === null)
                        {
                            Ext.getCmp('multilistid').setGrouped(false);
                            var datastore = Ext.getStore('datastoreid');
                            datastore.setSorters();
                            datastore.setGroupField();
                            Ext.getCmp('multilistparentid').hide();  
                        }
                        else
                        {

                            var store = Ext.getStore('multistoreid_'+fn.Var('g', 'p'+id));
                            if(store.data.all.length > 1)
                            {
                                Ext.getCmp('multilistparentid').show();
                            }
                            else
                            {
                                Ext.getCmp('multilistparentid').hide();
                            }
                            if(store.data.all.length !== 0)
                            {
                                var arr = [];
                                for(var i in store.data.all)
                                {
                                    var storedata = store.data.all[i].data;
                                    arr[arr.length] = storedata.id;
                                }
                                var datastore = Ext.getStore('datastoreid');
                                datastore.setSorters();
                                datastore.setGroupField();
                                datastore.setGroupField('parent_value');
                                datastore.sort({
                                    property: 'id',
                                    direction: 'ASC'
                                });
                                Ext.getCmp('multilistid').setGrouped(true);
                                this.fixParent(id, 'buttons');
                                return arr.join('|');
                            }
                            else
                            {
                                this.fn().customMsg(this.fn().Var('stat', 'error_parent_title'),this.fn().Var('stat', 'error_parent_message')+Ext.getCmp('id_'+fn.Var('g', 'p'+id)).getLabel());
                                return 'fail';
                            }

                        }
                    }
                }
                else
                {
                    var multipanel = this.getMultiview();
                    this.fixItemId(id);
                    var multilist = Ext.getCmp('multilistid');
                    multilist.deselectAll();
                    var multistore = Ext.getStore('multistore'+id);
                    var parentvalues = this.onList(id, 'multi-parent');
                    this.fixTabletPanels();
                    if(parentvalues !== 'fail')
                    {
                        if(multistore.data.all.length !== 0)
                        {
                            Ext.getStore('datastoreid').on('load', function(){
                                this.fn().dataTransfer(id, multistore, multilist, 'select');//'select', singlelist, data);
                                if(!listtype)
                                {
                                    this.fn().switchCard(Ext.getCmp('multilistview'), Ext.getCmp('multiid'));
                                    this.fn().switchCard(this.getMultiview(), Ext.getCmp('multilistview'));
                                    this.fn().switchCard(Ext.Viewport, this.getMultiview(), true);
                                }
                                else
                                {
                                    console.log('found problem');
                                    this.fn().switchCard(this.getMultiview(), 'multimidview', true);
                                }
                            }, this, {single: true});
                                this.onDataStores(id, undefined , parentvalues);
                            }
                            else
                            {
                                this.onDataStores(id, undefined, parentvalues);
                                if(!listtype)
                                {
                                    this.fn().switchCard(Ext.getCmp('multilistview'), Ext.getCmp('multiid'));
                                    this.fn().switchCard(this.getMultiview(), Ext.getCmp('multilistview'));
                                    this.fn().switchCard(Ext.Viewport, this.getMultiview(), true);
                                }
                            }
                        }
                        setTimeout(function(){
                            Ext.getCmp('multiid').getScrollable().getScroller().scrollTo(0,0,true);
                        }, 300);

                    }

                }
    },

    onLink: function(id, aux, record) {
        var fn = this.fn();
        var type = aux.split('-')[0];
        var aux = aux.split('-')[1];

        if(type === 'single')
        {
            if(Ext.getCmp('singlesearchfieldid'))
            Ext.getCmp('singlesearchfieldid').setValue('');
            this.fixFieldTitle('singleother', this.fn().Var('stat', 'link_andere'));
            var subaux = aux.split('.');
            if(subaux[0] === 'back')
            {
                fn.switchCard(this.getSingleview(),Ext.getCmp('singlemidview') , false);
            }
            else if(subaux[0] === 'enter')
            {
                if(Ext.getCmp('singlefield'+id).getData() === null)
                {
                    Ext.getCmp('singleclearbuttonid').hide();
                }
                else
                {
                    Ext.getCmp('singleclearbuttonid').show();
                }
                if(subaux[1] === 'mid')
                {

                    if(Ext.os.is.Tablet)
                    {
                        var fielddata = Ext.getCmp('singlefield'+id).getData();
                        if(fielddata === null)
                        {
                            Ext.getCmp('singleotherfieldid').setValue('');
                            var links = this.fn().Var('g', id);
                            var otherAvailable = true;
                            for(var i in links)
                            {
                                if(links[i] === 4)
                                {
                                    otherAvailable = false;
                                }
                            }
                            if(otherAvailable)
                            {
                                setTimeout(function(main){
                                    main.fixFieldTitle('singlelist', main.getLinkNames([links[0]])[0].value );
                                    main.getLinkNames([links[0]])[0].value;
                                    main.fn().switchCard('singlelistview', 'singleid', true);
                                    main.onLink(id, 'single-enter', {data: {type: links[0]}});
                                }, 100, this);
                            }
                        }
                        else
                        {
                            if(fielddata[0].data)
                            {
                                if(fielddata[0].data.type === 4)
                                {
                                    var otherdata = fielddata[0].data.value.split('Other: ');
                                    var othervalue;
                                    if(otherdata.length === 2)
                                    {
                                        othervalue = otherdata[1];
                                    }
                                    else
                                    {
                                        othervalue = otherdata;
                                    }

                                    Ext.getCmp('singleotherfieldid').setValue(othervalue);
                                }
                                else
                                {
                                    Ext.getCmp('singleotherfieldid').setValue('');
                                }
                                console.log(fielddata);
                                if(fielddata[0].type !== 4)
                                {
                                    this.onLink(id, 'single-enter', record);
                                    console.log('booyah');
                                }
                            }
                            else
                            {
                                if(fielddata[0].type === 4)
                                {
                                    Ext.getCmp('singleotherfieldid').setValue(fielddata[0].value);
                                }
                                else
                                {
                                    Ext.getCmp('singleotherfieldid').setValue('');
                                }
                                console.log(fielddata);
                                if(fielddata[0].type !== 4)
                                {
                                    this.onLink(id, 'single-enter', record);
                                    console.log('booyah');
                                }
                            }
                        }
                    }

                    var singleview = this.getSingleview();
                    fn.switchCard(singleview, 'singlemidview');
                    this.onLink(id, 'mid-single');
                    this.fixTabletPanels(true);
                    fn.switchCard(Ext.Viewport, singleview, true);

                }
                else
                {
                    if(record.data.type !== 4)
                    {

                        this.onList(id, 'single', undefined, record.data.type);
                    }
                    else
                    {
                        var singledata = Ext.getCmp('singlefield'+id).getData();
                        var singlemain = this.getSingleview();
                        var singlepanel = Ext.getCmp('singlelistview');
                        var singleother = Ext.getCmp('singleotherid');
                        this.fn().switchCard(singlepanel, singleother);
                        var textchanged = false;
                        if(singledata)
                        {
                            if(singledata[0].data)
                            {
                                if(singledata[0].data.type === 4)
                                {
                                    Ext.getCmp('singleotherfieldid').setValue(singledata[0].data.value);
                                    textchanged = true;
                                }
                            }
                            else
                            {
                                if(singledata[0].type === 4)
                                {
                                    Ext.getCmp('singleotherfieldid').setValue(singledata[0].value);
                                    textchanged = true;
                                }
                            }
                        }
                        if(!textchanged)
                        {
                            Ext.getCmp('singleotherfieldid').setValue('');
                        }
                        if(!Ext.os.is.Tablet)
                        this.fn().switchCard(singlemain, singlepanel, true);
                    }
                }
            }
            else if(subaux[0] === 'other')
            {
                if(Ext.getCmp('singleotherfieldid').getValue() !== '')
                this.onList(id, 'single-add', {data:{id: -1, type: 4, value: Ext.getCmp('singleotherfieldid').getValue()}});
            }
        }
        else if(type === 'multi')
        {
            if(Ext.getCmp('multisearchfieldid'))
            Ext.getCmp('multisearchfieldid').setValue('');
            this.fixFieldTitle('multiother', this.fn().Var('stat', 'link_andere'));
            var subaux = aux.split('.');
            if(subaux[0] === 'back')
            {
                fn.switchCard(this.getMultiview(),Ext.getCmp('multimidview') , false);
            }
            else if(subaux[0] === 'ok')
            {
                var currentmultilist = Ext.getCmp('multilistview').getActiveItem().id;
                var multilistview = this.getMultiview().getActiveItem().id;
                if(multilistview === 'multimidview' || currentmultilist === 'multiid')
                {
                    if(subaux[1] === 'update')
                    {
                        var selection = Ext.getCmp('multilistid').getSelection();
                        if(selection.length !== 0)
                        {
                            fn.dataTransfer(id, Ext.getStore('tempstoreid'), selection[0].data.type, 'remove');
                            fn.dataTransfer(id, selection, Ext.getStore('tempstoreid'), 'add');
                        }
                        else
                        {
                            var url = Ext.getStore('datastoreid').getProxy().getUrl();
                            var type = url.split('&rt.pt.id=')[1];
                            fn.dataTransfer(id, Ext.getStore('tempstoreid'), type, 'remove');

                        }
                        this.onLink(id, 'mid-multi');
                        if(!Ext.os.is.Tablet)
                        this.onLink(id, 'multi-back');
                    }
                    else
                    {
                        this.onLink(id, 'templink-leave');
                        this.onList('id', 'multi-back');
                    }
                }
                else if(currentmultilist === 'multiotherid')
                {
                    this.onLink(id, 'other-save');
                }
            }
            else if(subaux[0] === 'enter')
            {
                if(subaux[1] === 'mid')
                {
                    var multiview = this.getMultiview();
                    fn.switchCard(multiview, 'multimidview');
                    this.onLink(id, 'templink-enter');
                    this.onLink(id, 'mid-multi');
                    if(Ext.os.is.Tablet)
                    {
                        var links = this.fn().Var('g', id);
                        var otherExists = false;
                        for(var i in links)
                        {
                            if(links[i] === 4)
                            {
                                otherExists = true;
                                break;
                            }
                        }
                        if(otherExists)
                        {
                            this.onLink(id,'multi-enter', {data:{type: 4}});
                        }
                        else
                        {
                            setTimeout(function(main){
                                main.fixFieldTitle('multilist', main.getLinkNames([links[0]])[0].value );
                                main.onLink(id,'multi-enter', {data:{type: links[0]}});
                            }, 100, this);
                            /*Ext.getCmp('multilistparentid').hide();
                            this.onDataStores([links[0]]);
                            Ext.getCmp('multilistid').deselectAll();
                            this.onLink(id, 'templink-mainlist', {data: {type: links[0]}});
                            fn.switchCard(Ext.getCmp('multilistview'), 'multiid');
                            Ext.getCmp('multiid').getScrollable().getScroller().scrollTo(0,0,true);
                            fn.switchCard(this.getMultiview(), 'multilistview', true);*/
                        }
                    }
                    this.fixTabletPanels(true);
                    fn.switchCard(Ext.Viewport, multiview, true);

                }
                else
                {


                    if(record.data.type !== 4)
                    {
                        Ext.getCmp('multilistparentid').hide();
                        this.onDataStores([record.data.type]);
                        Ext.getCmp('multilistid').deselectAll();
                        this.onLink(id, 'templink-mainlist', record);
                        fn.switchCard(Ext.getCmp('multilistview'), 'multiid');
                        Ext.getCmp('multiid').getScrollable().getScroller().scrollTo(0,0,true);
                        fn.switchCard(this.getMultiview(), 'multilistview', true);
                    }
                    else
                    {
                        this.onLink(id, 'other-enter');
                    }

                }
                //fixTabletPanels();
            }
        }
        else if(type === 'mid')
        {
            var data;
            if(aux === 'single')
            {
                var isdata = Ext.getCmp('singlefield'+id).getData();
            }
            else
            {
                var isdata = Ext.getStore('tempstoreid').data.all;
            }
            var links = this.getLinkNames(fn.Var('g', id));

            if(isdata)
            {
                if(isdata.length !== 0)
                {
                    var data = isdata;
                    if(isdata[0].type)
                    {
                        var data = [{data:isdata[0]}];
                    }
                    var middata = [];
                    for(var i in links)
                    {
                        var linkno = 0;
                        for(var j in data)
                        {
                            if(data[j].data.type === links[i].type)
                            {
                                linkno += 1;
                            }
                        }
                        var linkname = links[i].value + ( (linkno === 0) ? '' : ' (' + linkno + ')');
                        middata[middata.length] = {type: links[i].type, value: linkname};
                    }
                    var midstore = Ext.getStore('midstoreid');
                    midstore.removeAll();
                    midstore.add(middata);
                }
                else
                {
                    var midstore = Ext.getStore('midstoreid');
                    midstore.removeAll();
                    midstore.add(this.getLinkNames(fn.Var('g', id)));
                }
            }
            else
            {
                var midstore = Ext.getStore('midstoreid');
                midstore.removeAll();
                midstore.add(this.getLinkNames(fn.Var('g', id)));
            }
        }
        else if(type === 'templink')
        {
            if(aux === 'enter')
            {
                var multistore = Ext.getStore('multistore'+id);
                var tempstore = Ext.getStore('tempstoreid');
                tempstore.removeAll();
                this.fn().dataTransfer(id, multistore, tempstore, 'add');
            }
            if(aux === 'leave')
            {
                var tempstore = Ext.getStore('tempstoreid');
                var multistore = Ext.getStore('multistore'+id);
                multistore.removeAll();
                this.fn().dataTransfer(id, tempstore,  multistore, 'add');
                this.onList(id, 'multi-fix');
            }
            else if(aux === 'mainlist')
            {
                var tempstore = Ext.getStore('tempstoreid');
                if(tempstore.data.all.length !== 0)
                {
                    Ext.getStore('datastoreid').on('load',function(){
                        var multilist = Ext.getCmp('multilistid');
                        multilist.deselectAll();
                        this.fn().dataTransfer(id, tempstore.data.all, multilist , 'select', undefined, record.data.type);
                    }, this, {single: true});
                    }
                    else
                    {
                        this.getMultiview().on('activeitemchange', function(){
                            var multilist = Ext.getCmp('multilistid');
                            multilist.deselectAll();
                        }, this, {single: true});
                        }
                    }
                }
                else if(type === 'other')
                {
                    if(aux === 'enter')
                    {
                        var otherstore = Ext.getStore('otherstoreid');
                        var tempstore = Ext.getStore('tempstoreid');
                        tempstore.filter('type', 4);
                        otherstore.removeAll();
                        if(tempstore.data.items.length !== 0)
                        {
                            this.fn().dataTransfer(id, tempstore, otherstore, 'add', undefined, 4);
                        }
                        tempstore.clearFilter();
                        fn.switchCard(Ext.getCmp('multilistview'),'multiotherid');
                        fn.switchCard(this.getMultiview(), 'multilistview', true);
                    }
                    else if(aux === 'add')
                    {
                        var otherstore = Ext.getStore('otherstoreid');
                        var value = Ext.getCmp('multiotherfieldid').getValue();
                        if(value !== '')
                        {
                            var otherstore = Ext.getStore('otherstoreid');
                            var data = {id: 'otherid'+ (otherstore.data.all.length + 1), type: 4, value: value};
                            otherstore.add(data);
                            Ext.getCmp('multiotherfieldid').setValue('');
                            if(Ext.os.is.Tablet)
                            {
                                this.onLink(id, 'other-save');
                            }
                        }
                        Ext.getCmp('multiotherfieldid').focus();
                    }
                    else if(aux === 'disclose')
                    {
                        var store = Ext.data.StoreManager.get('otherstoreid');
                        var readdarray = [];
                        for(var i in store.data.all)
                        {
                            if(record.data.id !== store.data.all[i].data.id)
                            {
                                readdarray[readdarray.length] = store.data.all[i];
                            }
                        }
                        store.removeAll();
                        if(readdarray.length !== 0)
                        {
                            for(var i in readdarray)
                            {
                                readdarray[i].data.id = 'otherid'+i;
                            }

                            this.fn().dataTransfer(id, readdarray, store, 'add');
                        }
                        if(Ext.os.is.Tablet)
                        {
                            this.onLink(id, 'other-save');
                        }



                        //this.fn().dataTransfer(id, Ext.getStore('otherstoreid'), record, 'remove');
                    }
                    else if(aux === 'save')
                    {
                        this.fn().dataTransfer(id, Ext.getStore('tempstoreid'), 4, 'remove');
                        this.fn().dataTransfer(id, Ext.getStore('otherstoreid'), Ext.getStore('tempstoreid'), 'add');
                        this.onLink(id, 'mid-multi');
                        this.fn().switchCard(this.getMultiview(), 'multimidview', false);
                    }
                }
                else
                {
                    //console.log('fn: onLink: type error');
                }
    },

    onTablet: function(id, aux) {
        var fn = this.fn();
        if(aux === 'back')
        {
            fn.switchCard(Ext.Viewport, fn.getCanvas(), false);
        }
        else if(aux === 'ok')
        {
            this.onLink(id, 'templink-leave');
            this.onTablet(id, 'back');
        }
        else if(aux === 'listclick')
        {
            var id = this.fn().Var('g', 'currentid');
            var tempstore = Ext.getStore('tempstoreid');
            var multilist = Ext.getCmp('multilistid');
            if(Ext.getCmp('multilistview').getWidth() === '50%')
            {
                setTimeout(function(main){
                    if(multilist.getSelection().length !== 0)
                    {
                        main.onLink(id,'multi-ok.update');
                        main.onLink(id,'multi, enter');
                    }
                    else
                    {
                        main.fn().dataTransfer(id, tempstore, multilist.getStore().getProxy().getUrl().split('&rt.pt.id=')[1], 'remove');
                    }
                }, 50, this);
            }
        }
    },

    onAttachment: function(id) {
        var msgbox = new Ext.MessageBox();
        msgbox.show({
            title: 'Choose an Image?',
            buttons: [
            {text: 'Library', itemId: 'library'},
            {text: 'Camera', itemId: 'camera'},
            {text: 'Cancel', itemId: 'cancel'}
            ],
            fn: function(answer){
                if(answer !== 'cancel')
                {
                    Ext.device.Camera.capture({
                        source: answer,
                        quality: 75,
                        width: 200,
                        height: 200,
                        destination: 'data',
                        success: function(image){
                            Ext.getCmp('attachmenttextfield'+id).hide();
                            Ext.getCmp('attachmentimagefield'+id).show();
                            Ext.getCmp('attachmentimagefield'+id).setSrc('data:image/png;base64,'+image);
                        },
                        failure: function(){
                            console.log('image failure');
                        }
                    });
                }
            }
        });
    },

    fixParent: function(id, aux) {
        if(aux === 'buttons')
        {
            var fn = this.fn();

            var panel = Ext.getCmp('multilistparentid');
            var store = Ext.getStore('multistoreid_'+fn.Var('g', 'p'+id));

            var fltrdata = [];
            for(var i in store.data.all)
            {
                fltrdata[fltrdata.length] = store.data.all[i].data.value;
            }
            var buttonarr = [];
            fltrdata.sort();
            for(var i in fltrdata)
            {
                buttonarr[buttonarr.length] = {xtype: 'button', text: fltrdata[i], id: 'parentbuttonid_'+(i+1), cls: 'parent-button-up'};
            }
            Ext.getCmp('multilistparentid').removeAll();
            Ext.getCmp('multilistparentid').add({
                xtype: 'segmentedbutton',
                id: 'multiparentbuttonsetid',
                allowMultiple: true,
                pressedCls: 'parent-button-down',
                //cls: 'customSegCls',
                items: buttonarr
            });
        }
        else if(aux === 'filter')
        {
            var fn = this.fn();
            var btngrp = Ext.getCmp('multiparentbuttonsetid');
            var typesArrObj = btngrp.getPressedButtons();
            var type = [];
            for(var i in typesArrObj)
            {
                type[type.length] = typesArrObj[i].getText();
            }

            var store = Ext.getStore('datastoreid');
            store.clearFilter();
            store.filter(function(item){
                var isTrue = false;
                for(var i in type)
                {

                    if(item.data.parent_value === type[i])
                    {
                        isTrue = true;
                        break;
                    }
                }
                return !isTrue;
            });

        }
    },

    fixClearIcons: function(id, type) {
        if(!id)
        var id = this.fn().Var('g', 'currentid');

        var field = Ext.getCmp(type + 'field' + id);
        var clearbutton = Ext.getCmp( type + 'clearbutton' + id);

        if(field.getValue())
        {
            clearbutton.show();
        }
        else
        {
            clearbutton.hide();
        }
    },

    fixTabletPanels: function(adapt, notOther) {
        if(Ext.os.is.Tablet)
        {
            if(adapt)
            {
                if(Ext.getCmp('singleviewid'))
                {
                    var singlelist = Ext.getCmp('singlelistview');
                    var singlemid = Ext.getCmp('singlemidview');
                    var singlepanel = Ext.getCmp('singleviewid');
                    singlemid.setWidth('50%');
                    singlelist.setWidth('50%');
                    if(!notOther)
                    this.fn().switchCard(singlelist, 'singleotherid');
                }
                if(Ext.getCmp('multiviewid'))
                {
                    var multilist = Ext.getCmp('multilistview');
                    var multimid = Ext.getCmp('multimidview');
                    var multipanel = Ext.getCmp('multiviewid');
                    multimid.setWidth('50%');
                    multilist.setWidth('50%');
                    if(!notOther)
                    this.fn().switchCard(multilist, 'multiotherid');
                }
            }
            else
            {
                Ext.getCmp('singlelistview').setWidth('100%');
                Ext.getCmp('singlemidview').setWidth('0%');
                Ext.getCmp('multilistview').setWidth('100%');
                Ext.getCmp('multimidview').setWidth('0%');
            }
        }
    },

    dateControl: function(id, fnType) {
        var fn = this.fn();
        var datePicker = Ext.getCmp('datepickerid');
        if(!datePicker)
        {
            fn.Var('g', 'currentid', id);
            var datePicker = Ext.create('Ext.picker.Date',{
                cancelButton: {text: fn.Var('static','button_cancel'), id: 'datecancelbuttonid', width: 90},
                doneButton: {text: fn.Var('static','button_ok'), id: 'dateokbuttonid', ui: 'confirm', width: 90},
                id: 'datepickerid',
                height: '100%'
            });
            Ext.Viewport.add(datePicker);
            var datedata = Ext.getCmp('datefield'+id).getData();

            if(datedata)
            {
                datePicker.setValue(new Date(datedata[0].year, datedata[0].month, datedata[0].day));
            }
            else
            datePicker.setValue(new Date());
        }
        else
        {

            if(fnType === 'show')
            {
                var data = Ext.getCmp('datefield'+id).getData();
                if(data === null)
                {
                    var replacedate = new Date();
                }
                else
                {
                    var replacedate = new Date(data.year, data.month, data.day);
                }
                datePicker.setValue(replacedate);
                datePicker.show();
            }
            else if(fnType === 'hide')
            {
                var newdate = datePicker.getValues();
                Ext.getCmp('dateclearbutton'+id).show();
                var datedata = {year: newdate.getFullYear(), month: newdate.getMonth(), day: newdate.getDate()};
                var datevalue = newdate.toDateString();
                Ext.getCmp('datefield'+id).setValue(datevalue);
                Ext.getCmp('datefield'+id).setData(datedata);
                datePicker.hide();
            }
            else if(fnType === 'clear')
            {
                var field = Ext.getCmp('datefield'+id);
                field.setData(null);
                field.setValue('');
                Ext.getCmp('dateclearbutton'+id).hide();
            }
        }
    },

    timeControl: function(id, fnType) {
        var fn = this.fn();
        var timePicker = Ext.getCmp('timepickerid');
        if(!timePicker)
        {
            fn.Var('g', 'currentid', id);
            var timePicker = Ext.create('Ext.Picker', {
                id: 'timepickerid',
                height: '100%',
                useTitles: true,
                cancelButton: {text: fn.Var('static','button_cancel'), id: 'timecancelbuttonid', width: 90},
                doneButton: {text: fn.Var('static','button_ok'), id: 'timeokbuttonid', ui: 'confirm', width: 90},
                slots: [
                {
                    name : 'time_hour',
                    title: fn.Var('stat','time_hour'),
                    data : [
                    {text: '00', value: '00'},{text: '01', value: '01'},{text: '02', value: '02'},{text: '03', value: '03'},{text: '04', value: '04'},{text: '05', value: '05'},{text: '06', value: '06'},{text: '07', value: '07'},{text: '08', value: '08'},{text: '09', value: '09'},{text: '10', value: '10'},{text: '11', value: '11'},{text: '12', value: '12'},{text: '13', value: '13'},{text: '14', value: '14'},{text: '15', value: '15'},{text: '16', value: '16'},{text: '17', value: '17'},{text: '18', value: '18'},{text: '19', value: '19'},{text: '20', value: '20'},{text: '21', value: '21'},{text: '22', value: '22'},{text: '23', value: '23'}
                    ]
                },
                {
                    name : 'time_min',
                    title: fn.Var('stat','time_min'),
                    data : [
                    {text: '00', value: '00'},{text: '01', value: '01'},{text: '02', value: '02'},{text: '03', value: '03'},{text: '04', value: '04'},{text: '05', value: '05'},{text: '06', value: '06'},{text: '07', value: '07'},{text: '08', value: '08'},{text: '09', value: '09'},{text: '10', value: '10'},{text: '11', value: '11'},{text: '12', value: '12'},{text: '13', value: '13'},{text: '14', value: '14'},{text: '15', value: '15'},{text: '16', value: '16'},{text: '17', value: '17'},{text: '18', value: '18'},{text: '19', value: '19'},{text: '20', value: '20'},{text: '21', value: '21'},{text: '22', value: '22'},{text: '23', value: '23'},{text: '24', value: '24'},{text: '25', value: '25'},{text: '26', value: '26'},{text: '27', value: '27'},{text: '28', value: '28'},{text: '29', value: '29'},{text: '30', value: '30'},{text: '31', value: '31'},{text: '32', value: '32'},{text: '33', value: '33'},{text: '34', value: '34'},{text: '35', value: '35'},{text: '36', value: '36'},{text: '37', value: '37'},{text: '38', value: '38'},{text: '39', value: '39'},{text: '40', value: '40'},{text: '41', value: '41'},{text: '42', value: '42'},{text: '43', value: '43'},{text: '44', value: '44'},{text: '45', value: '45'},{text: '46', value: '46'},{text: '47', value: '47'},{text: '48', value: '48'},{text: '49', value: '49'},{text: '50', value: '50'},{text: '51', value: '51'},{text: '52', value: '52'},{text: '53', value: '53'},{text: '54', value: '54'},{text: '55', value: '55'},{text: '56', value: '56'},{text: '57', value: '57'},{text: '58', value: '58'},{text: '59', value: '59'}
                    ]
                }
                ]
            });
            Ext.Viewport.add(timePicker);
            var timedata = Ext.getCmp('timefield'+id).getData();
            if(timedata)
            {
                timePicker.setValue({time_hour: timedata[0].hour, time_min: timedata[0].minute});
            }
            else
            {
                var date = new Date();
                timePicker.setValue({time_hour: date.getHours(), time_min: date.getMinutes()});
            }

        }
        else
        {
            if(fnType === 'show')
            {
                var data = Ext.getCmp('timefield'+id).getData();
                if(data === null)
                {
                    var date = new Date();
                    var replacetime = {time_hour: date.getHours(), time_min: date.getMinutes()};
                }
                else
                {
                    var replacetime = {time_hour: data.time_hour, time_min: data.time_min};
                }
                timePicker.setValue(replacetime);
                timePicker.show();
            }
            else if(fnType === 'hide')
            {
                var timevalue = timePicker.getValues();
                Ext.getCmp('timeclearbutton'+id).show();
                Ext.getCmp('timefield'+id).setValue(timevalue.time_hour + ':' + timevalue.time_min);
                Ext.getCmp('timefield'+id).setData(timevalue);
                timePicker.hide();
            }    
            else if(fnType === 'clear')
            {
                var field = Ext.getCmp('timefield'+id);
                field.setData(null);
                field.setValue('');
                Ext.getCmp('timeclearbutton'+id).hide();
            }
        }
    },

    checkTextField: function(obj, e, eOpts) {
        var name = obj.getId();
        var splitObj = name.split('id_');
        var splitname = splitObj[0];
        var id = 'id_' + splitObj[1];
        var type = this.Var('g', id);
        var isDisabled = this.Var('g', 'd'+id);

        if(getCom('single', id))
        {
            console.log('singlefield');
            getCom('single', id).blur();
        }
        else if(getCom('date', id))
        {
            console.log('datefield');
            getCom('date', id).blur();
        }
        else if(getCom('time', id))
        {
            console.log('timeield');
            getCom('time', id).blur();
        }
        else if(Ext.getCmp('multitext'+id))
        {
            console.log('multifield');
            Ext.getCmp('multitext'+id).blur();
        }


        function getCom(type, id)
        {
            return Ext.getCmp(type+'field'+id);
        }

    },

    getLinkNames: function(type) {
        //this is a complete list of links used thusfar
        //it is used in singlelinks and multilinks
        var fn = this.fn();
        var list = [];
        for(i = 0; i < type.length;i++)
        {
            switch(type[i])
            {
                case 1:
                list[list.length] = {type: 1, value: fn.Var('stat', 'link_category_1')};
                break;
                case 2:
                list[list.length] = {type: 2, value: fn.Var('stat', 'link_category_2')};
                //list[list.length] = {type: 2, value: fn.Var('stat', 'link_functie')};
                break;
                case 3:
                list[list.length] = {type: 3, value: fn.Var('stat', 'link_afdeling')};
                break;
                case 4:
                list[list.length] = {type: 4, value: fn.Var('stat', 'link_andere')};
                break;
                case 14:
                list[list.length] = {type: 14, value: fn.Var('stat', 'link_medewerker')};
                break;
                case 15:
                list[list.length] = {type: 15, value: fn.Var('stat', 'link_e_medewerker')};
                break;
                case 16:
                list[list.length] = {type: 16, value: fn.Var('stat', 'link_e_organisatie')};
                break;
                default:
                list[list.length] = {type: 100, value: fn.Var('stat', 'link_weet_niet')};
                break;
            }
        }
        return list;
    },

    destroyCanvas: function(type) {
        var fn = this.fn();
        fn.loadingScreen();
        if(type === 'declinebuttonid')
        {
            //destroy template on server side
            Ext.Ajax.request({
                url: this.fn().Var('sett', 'url-prefex') + '/servlet/reporttablet?rt.action=10',
                scope: this
            });

        }

        Ext.Viewport.on('activeitemchange', function(){
            Ext.destroy(fn.getCanvas());
            //fn.getCanvas().destroy();
            setTimeout(function(){
                fn.loadingScreen();
            }, 500);
        }, this, {single: true});

            /*    Ext.Viewport.on('remove', function(){
            //fn.loadingScreen();
        }, this, {single: true});
            */
            this.fn().switchCard(Ext.Viewport, fn.getHomescreen(), false);
            fn.Var('g', 'inApp', 'false');

    },

    sendReport: function(id) {
        var fn = this.fn();
        fn.customMsg(fn.Var('stat', 'send_title'), fn.Var('stat', 'send_message'), 2,
        function(answer) {
            if ( answer ==='yes')
            { 
                fn.loadingScreen();
                var gathereddata = this.gatherData(false);
                var jsondata = {jsonValue: Ext.encode(gathereddata[0])};
                var requestresponse = Ext.Ajax.request({
                    url: fn.Var('sett', 'url-prefex') + '/json_dependency_files/success/success.json',//'/servlet/reporttablet?rt.action=11',
                    //params: jsondata,
                    success: function(response, opts) {
                        try
                        {
                            var json = Ext.decode(response.responseText);
                            if(json.type === 'succes')
                            {
                                var tybutton = this.fn().Var('stat','text_template_recreate');
                                this.getThankyouview();
                                Ext.getCmp('thankyoutitleid').setTitle('You successfully handed in your report');//json.title);
                                Ext.getCmp('newreportbuttonid').setText(tybutton);
                                Ext.getCmp('thankyouhtmlid').setHtml('The report you filled in was filled in appropriately. It has been sent in and you can continue now.');//json.message);
                                this.fn().getCanvas().add(this.getThankyouview());
                                this.fn().switchCard(fn.getCanvas(), this.getThankyouview(), true);  
                            }
                            else
                            {
                                var gathereddata = this.gatherData(true);
                                this.fn().customMsg(json.title, json.message, 1);
                                /*Ext.getCmp('customerrorhtmlid').setHtml(json.message);
                                Ext.getCmp('customerrorid').show();*/
                            }
                            fn.loadingScreen();
                        }
                        catch(err)
                        {
                            fn.customMsg(fn.Var('stat', 'error_title'),fn.Var('stat', 'error_server'), 1);
                            fn.loadingScreen();
                            return;
                        }
                    },
                    failure: function(response, opts) {
                        fn.loadingScreen();
                        fn.customMsg(fn.Var('stat', 'error_title'),fn.Var('stat', 'error_server'), 1);
                    },
                    scope: this
                });
            }
        }, this);
    },

    gatherData: function(doValidate) {
        var fn = this.fn();
        var mainview = fn.getMainview();

        var tabs = mainview.innerItems[0].innerItems;
        //console.log('tabs', tabs);


        var data = [];
        for(var i in tabs)
        {
            var sets = tabs[i].innerItems;
            //console.log('sets', sets);
            for(var j in sets)
            {
                var fields = sets[j].innerItems;
                //console.log('fields', fields);
                for(var k in fields)
                {
                    //var isTrueField = false;
                    var id = fields[k].id;
                    var trueid = id.split('_');
                    var xtype = fields[k].config.xtype;
                    var eachvalue = {};
                    if(trueid.length === 2)
                    {
                        if(xtype === 'textfield' || xtype === 'textareafield' || xtype === 'numberfield')
                        {
                            data[data.length] = {fieldid: trueid[1], fieldvalue: Ext.getCmp(id).getValue()};
                        }
                        else if(xtype === 'field')
                        {
                            var fieldid = fields[k].getComponent().innerItems[0].id;

                            var fielddefiner = fieldid.split('id_');
                            if(fielddefiner[0] === 'singlefield')
                            {
                                var fielddata = Ext.getCmp(fieldid).getData();
                                if(fielddata !== null)
                                {
                                    try
                                    {
                                        data[data.length] = {fieldid: fielddefiner[1], fieldvalue:{id: fielddata[0].data.id, type: fielddata[0].data.type, value: fielddata[0].data.value}};
                                    }
                                    catch(err)
                                    {
                                        data[data.length] = {fieldid: fielddefiner[1], fieldvalue:{id: fielddata[0].id, type: fielddata[0].type, value: fielddata[0].value}};
                                    }                                
                                }
                                else
                                {
                                    data[data.length] = {fieldid: fielddefiner[1], fieldvalue: null};
                                }
                            }
                            else if(fielddefiner[0] === 'datefield' || fielddefiner[0] === 'timefield')
                            {
                                var fielddata = Ext.getCmp(fieldid).getData();

                                if(fielddata !== null)
                                {
                                    data[data.length] = {fieldid: fielddefiner[1], fieldvalue: fielddata};
                                }
                                else
                                {
                                    data[data.length] = {fieldid: fielddefiner[1], fieldvalue: null};
                                }
                            }
                            else if(fielddefiner[0] === 'multi' || fielddefiner[0] === 'multitext')
                            {
                                var storedata = Ext.getStore('multistore'+id).data.all;
                                var subdata = [];
                                if(storedata.length !== 0)
                                {
                                    for(var a in storedata)
                                    {
                                        subdata[subdata.length] = {id: storedata[a].data.id, type: storedata[a].data.type, value: storedata[a].data.type === 4 ? storedata[a].data.value : null};
                                    }
                                }
                                else
                                {
                                    subdata = null;
                                }
                                data[data.length] = {fieldid: fielddefiner[1], fieldvalue: subdata};
                            }
                        }
                    }
                }
            }
        }
        if(doValidate)
        return [data, this.doValidate(data)];
        else
        return [data,false];
    },

    doValidate: function(data) {
        //this is a sub-function of the function GatherData, and this checks the data transfered to see
        //firstly whether the field is required, and if it is, if the data isn't null
        var isFaults = false;

        for(var i in data)
        {
            if(this.fn().Var('g', 'rid_' + data[i].fieldid) === 'true')
            {
                if(val(data[i]))
                {
                    Ext.getCmp('id_'+data[i].fieldid).label.dom.style.color = '#F00';
                    isFaults = true;
                }
                else
                {
                    Ext.getCmp('id_'+data[i].fieldid).label.dom.style.color = '#000';
                }
            }
        }

        return isFaults;


        function val(data){
            if(data.fieldvalue === null)
            {
                return true;
            }
            else if(data.fieldvalue === '')
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    },

    fn: function() {
        return Incident.app.getController('GlobalControl');
    }

});