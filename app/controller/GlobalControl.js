/*
 * File: app/controller/GlobalControl.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Incident.controller.GlobalControl', {
    extend: 'Ext.app.Controller',
    alias: 'controller.globalcontrol',

    config: {
        routes: {
            'debug': 'isDebug',
            'refresh': 'isRefresh'
        },

        refs: {
            loginview: 'loginview',
            settingsview: {
                autoCreate: true,
                selector: 'settingsview',
                xtype: 'settingsview'
            },
            homescreen: {
                autoCreate: true,
                selector: 'homescreenview',
                xtype: 'homescreenview'
            },
            mainview: {
                autoCreate: true,
                selector: 'mainview',
                xtype: 'mainview'
            },
            maintabs: '#maintabsid',
            canvas: {
                autoCreate: true,
                selector: 'canvas',
                xtype: 'canvas'
            }
        }
    },

    init: function(application) {
        //Version Check
        var isPhone = false;
        if(isPhone)
        {
            Ext.os.is.Phone = true;
            Ext.os.is.Tablet = false;
        }
        else if(Ext.os.is.Phone)
        {
            Ext.os.is.Phone = true;
            Ext.os.is.Tablet = false;
        }
        else if(Ext.os.is.Tablet || Ext.os.is.Desktop)
        {
            Ext.os.is.Tablet = true;
            Ext.os.is.Phone = false;
            Ext.Viewport.on('add', function(){
                Ext.getCmp('mainloginviewid').setCentered(true);
            }, this, {single: true});
        }
        else
        {
            this.customMsg('Error.', 'An error occured, please contact your system administrator', 1);
        }



        this.control({
            'list': {
                itemtap: this.reRouteLists,
                disclose: this.reRouteListDis
            },
            'button': {
                tap: this.reRouteButtons
            },
            'input': {
                masktap: this.reRouteMasks
            },
            'img': {
                tap: this.reRouteClear
            },
            'searchfield': {
                keyup: this.searchFn,
                clearicontap: this.searchFn
            },
            'textareafield': {
                keyup: this.cfn('mc').textareaControl,
                clearicontap: this.cfn('mc').textareaControl
            },
            'textfield': {
                focus: this.cfn('mc').checkTextField
            },
            'numberfield': {
                focus: this.cfn('mc').redoNumberField
            }

        });


    },

    launch: function() {


        //comment this out to request url on initial startup
        //this.Var('sett', 'url-prefex', 'http://192.168.0.37:8088/MMS');
        /*if(Ext.device === undefined)
        {
            var url = document.URL;
            var surl = url.split('/app.html');
            this.Var('sett', 'url-prefex', surl[0]);
        }*/



        //URL Configurations
        var burl = this.Var('sett', 'url-prefex');
        if( burl === '' || burl === 'fail')
        {
                //for url, always include "http://" or "https://" in front of url and no backslash at the back
                try
                {

                    var urlprefex = window.location.href.replace("app.html", "");//'http://192.168.0.37:8088/MMS';
                    this.Var('sett', 'url-prefex', urlprefex);
                    var refreshOn = this.Var('g', 'refresh');
                    var auxstore = Ext.getStore('auxstoreid');
                    auxstore.setProxy({url: this.Var('sett', 'url-prefex') + '/json_dependency_files/auxdata.json' /* auxstore.getProxy().getUrl()*/});
                    auxstore.on('load', function(){
                        var init = this.Var('g', 'langsecondary');
                        if(init === 'fail' || init === 'false') {this.addLanguages();}
                    }, this, {single: true});

                        var configstore = Ext.getStore('configstoreid');
                        configstore.setProxy({url: this.Var('sett', 'url-prefex')+ '/json_dependency_files/config.json'});// + configstore.getProxy().getUrl()});
                        configstore.on('load', function(){
                            this.configurations('startup');
                        }, this, {single: true});
                            configstore.load();

                            //Init Global isLoggedIn var
                            this.Var('g', 'inApp', 'false');
                            this.Var('g', 'debug', 'false');
                            this.Var('g', 'refresh', 'false');
                            this.Var('g', 'langsecondary', 'false');
                            this.Var('stat', 'loggedIn', 'false');
                            this.Var('sett', 'username-log', 'false');
                            var user = this.Var('stat', 'currentusername');
                            if(true)//user === 'false' || user === 'fail')
                            {

                                this.Var('stat', 'currentusername', 'false');
                                this.Var('stat', 'currentpassword', 'false');
                            }
                            //Ext.require(['Ext.field.Search','Ext.dataview.List']);
                            //Ext.onReady(function(){
                            //    setTimeout(function(main){
                            if(Ext.os.is.Tablet)
                            {
                                this.cfn('mc').getSingleview({layout: 'hbox'});
                                this.cfn('mc').getMultiview({layout: 'hbox'});
                            }
                            else
                            {
                                this.cfn('mc').getSingleview();
                                this.cfn('mc').getMultiview();
                            }
                        }
                        catch(er)
                        {
                            this.Var('sett', 'url-prefex', '');
                            this.launch();
                        }
                    }
                    else
                    {
                        try
                        {
                            var urlprefex = this.Var('sett', 'url-prefex');//'http://192.168.0.37:8088/MMS';
                            var refreshOn = this.Var('g', 'refresh');
                            var auxstore = Ext.getStore('auxstoreid');
                            auxstore.setProxy({url: this.Var('sett', 'url-prefex')  + '/json_dependency_files/auxdata.json'/*+ auxstore.getProxy().getUrl()*/});
                            auxstore.on('load', function(){
                                var init = this.Var('g', 'langsecondary');
                                if(init === 'fail' || init === 'false') {this.addLanguages();}
                            }, this, {single: true});

                                var configstore = Ext.getStore('configstoreid');
                                configstore.setProxy({url: this.Var('sett', 'url-prefex') + '/json_dependency_files/config.json'/*configstore.getProxy().getUrl()*/});
                                configstore.on('load', function(){
                                    this.configurations('startup');
                                }, this, {single: true});
                                    configstore.load();


                                    //Init Global isLoggedIn var
                                    this.Var('g', 'inApp', 'false');
                                    this.Var('g', 'debug', 'false');
                                    this.Var('g', 'refresh', 'false');
                                    this.Var('g', 'langsecondary', 'false');
                                    this.Var('stat', 'loggedIn', 'false');
                                    this.Var('sett', 'username-log', 'false');

                                    var user = this.Var('stat', 'currentusername');
                                    if(user === 'false' || user === 'fail')
                                    {

                                        this.Var('stat', 'currentusername', 'false');
                                        this.Var('stat', 'currentpassword', 'false');
                                    }
                                    //Ext.require(['Ext.field.Search','Ext.dataview.List']);
                                    //Ext.onReady(function(){
                                    //    setTimeout(function(main){
                                    if(Ext.os.is.Tablet)
                                    {
                                        this.cfn('mc').getSingleview({layout: 'hbox'});
                                        this.cfn('mc').getMultiview({layout: 'hbox'});
                                    }
                                    else
                                    {
                                        this.cfn('mc').getSingleview();
                                        this.cfn('mc').getMultiview();
                                    }
                                }
                                catch(err)
                                {
                                    this.Var('sett', 'url-prefex', '');
                                    this.launch();
                                }
                            }
    },

    configurations: function(startup) {

        var appconfig = Ext.getStore('configstoreid').data.all;

        for(var i in appconfig)
        {
            statdata = '';
            var init = appconfig[i].data;
            if(init.id === 'lang-default')
            {
                this.Var('stat', init.id, init.value);
                if(this.Var('sett', 'langvalue') == 'fail')
                	this.Var('sett', 'langvalue', init.value);
            }

            if(init.id === 'login-initialize')
            {
                this.Var('stat', init.id, init.value);

            }
        }
        Ext.getStore('auxstoreid').load();

        var store = Ext.getStore('templatestoreid');
        var prefex = this.Var('sett', 'url-prefex') !== 'fail' || this.Var('sett', 'url-prefex') !== '' ? this.Var('sett', 'url-prefex') : '';
        var newurl =  prefex +store.getProxy().getUrl();
        store.setProxy({
            url: newurl
        });
        if(startup)
        {
            var startuptype = this.Var('stat', 'login-initialize');
            if(startuptype === '1')
            {
                Ext.getCmp('guestbuttonid').show();
                var user = this.Var('stat', 'currentusername');
                if( user !== 'false')
                {
                    Ext.getCmp('usernameid').setValue(this.Var('stat', 'currentusername'));
                    Ext.getCmp('passwordid').setValue(this.Var('stat', 'currentpassword'));
                    //this.cfn('log').executeLogIn();
                }
                else
                {
                    this.Var('stat', 'loggedIn', 'false');
                }
            }
            else if(startuptype === '2')
            {
                var user = this.Var('stat', 'currentusername');
                if( user !== 'false')
                {
                    Ext.getCmp('usernameid').setValue(this.Var('stat', 'currentusername'));
                    Ext.getCmp('passwordid').setValue(this.Var('stat', 'currentpassword'));
                    //this.cfn('log').executeLogIn();
                }
                else
                {
                    this.Var('stat', 'loggedIn', 'false');
                }
            }
            else if(startuptype === '3')
            {

                Ext.getCmp('loginbuttonid').fireEvent('tap');
                /*Ext.getCmp('usernameid').setValue('webform');
                Ext.getCmp('passwordid').setValue('inception01092000');
                this.cfn('log').executeLogIn();*/
            }
        }
        else
        {
            this.customMsg('Error: 1061N', this.Var('stat', 'error_server'), 1);
        }
    },

    addLanguages: function() {
        var auxstore = Ext.getStore('auxstoreid');
        var settingsstore = Ext.getStore('settingsstoreid');
        var staticstore = Ext.getStore('staticstoreid');
        var lang = this.Var('sett', 'langvalue');
        var dataArr = [[],[]];
        var currentus;
        for(var i in settingsstore.data.all)
        {
            var setdata = settingsstore.data.all[i].data;
            if(setdata.localid !== 'LANGVALUE' && setdata.localid !== 'LANGNAME')
            {
                if(setdata.localid === 'USERNAME-LOG')
                {
                    if(this.Var('stat', 'loggedIn') === 'true')
                    	currentus = setdata;
                }
                else
                	dataArr[0][dataArr[0].length] = {localid: setdata.localid, value: setdata.value};

            }
        }
        for(var i in staticstore.data.all)
        {
            var statdata = staticstore.data.all[i].data;
            if(statdata.localid === 'CURRENTUSERNAME' || statdata.localid === 'CURRENTSCREEN' || statdata.localid === 'CURRENTPASSWORD' || statdata.localid === 'LOGGEDIN' || statdata.localid === 'LOGIN-INITIALIZE' || statdata.localid === 'LANG-DEFAULT' || statdata.localid === 'LANG-VERSION' || statdata.localid === 'URL-PREFEX')
            {
                dataArr[1][dataArr[1].length] = {localid: statdata.localid, value: statdata.value};
            }
        }

        settingsstore.removeAll();
        staticstore.removeAll();

        for(var i in auxstore.data.all)
        {
            var auxdata = auxstore.data.all[i].data;
            if(String(auxdata.id) === String(lang))
            {
                this.Var('sett', 'langvalue', auxdata.id);
                for(var j in auxdata.data)
                {
                    var langdata = auxdata.data[j];
                    if(langdata.id === 'lang_prefex')
                    {
                        this.Var('sett', 'langname', langdata.value + ': ' + auxdata.value);
                    }
                    else
                    	this.Var('stat', langdata.id, langdata.value);
                }
            }
        }
        settingsstore.add(dataArr[0]);
        staticstore.add(dataArr[1]);
        if(currentus)
        {
            var setdata = currentus;
            var currentuser = null;
            var currentusername;
            if(setdata.value !== undefined && setdata.value !== 'false')
            {
                currentuser = {localid: setdata.localid, value: this.Var('stat', 'text_current_user') + setdata.value.split(':')[1]};
                settingsstore.add(currentuser);
            }
            else
            {
                var currentusername = this.Var('stat', 'currentusername');
                if(currentusername !== 'fail' && currentusername !== 'false')
                {
                    currentuser = {localid: setdata.localid, value: this.Var('stat', 'text_current_user') + currentusername};
                    settingsstore.add(currentuser);
                }
                else
                {
                    currentuser = null;
                }
            }
        }
        this.fixStaticText();

    },

    reRouteLists: function(obj, index, target, record, e, eOpts) {
        var name;
        if(this.Var('g', 'inApp') === 'false')
        {
            name = obj.getId();
            if(name === 'settingslistid' || name === 'langlistid')
            {
                this.cfn('log').settingsControl(name, record);
            }
            else if(name === 'homescreenlistid')
            {
                this.cfn('temp').templateChoice(record);
            }
            else
            {
                console.log(name);
            }
        }
        else
        {
            name = obj.getId();
            var splitObj = name.split('id_');
            var splitname = splitObj[0];
            var id = 'id_' + splitObj[1];
            var type = this.Var('g', id);
            var isDisabled = this.Var('g', 'd'+id);
            if(isDisabled !== 'true')
            {
                if(splitObj[1] === undefined)
                {
                    id = this.Var('g', 'currentid');
                }
                else
                {
                    this.Var('g', 'currentid', id);
                }
                type = this.Var('g', id);

                //reroute
                if(name === 'singlelistid' || name === 'singlemidlistid')
                {
                    this.cfn('mc').onSingle(id, type, name, record);
                }
                else if(splitname === 'multi' || splitname === 'multimidlistid')
                {
                    this.cfn('mc').onMulti(id, type, splitname, record);
                }
                else if(name === 'multilistid')
                {
                    if(Ext.os.is.Tablet)
                    {
                        this.cfn('mc').onTablet(id, 'listclick');
                    }
                }
                else
                {
                    console.log(name, splitObj, splitname, id, type);
                }
            }
        }
    },

    reRouteListDis: function(obj, record, target, index, e, eOpts) {
        e.stopPropagation();
        if(this.Var('g', 'inApp') === 'false')
        {
            var objId = obj.getId();

        }
        else
        {
            var name = obj.getId();
            var splitObj = name.split('id_');
            var splitname = splitObj[0];
            var id = 'id_' + splitObj[1];
            if(splitObj[1] === undefined)
            {
                id = this.Var('g', 'currentid');
            }
            else
            {
                this.Var('g', 'currentid', id);
            }
            var type = this.Var('g', id);

            if(splitname === 'multi')
            {
                this.cfn('mc').onList(id, 'multi-disclose', record);
            }
            else if(splitname === 'multiotherlistid')
            {
                this.cfn('mc').onLink(id, 'other-disclose', record);
            }
            else
            {
                console.log(obj, objId, splitObj, splitname, id, type);
            }


        }

    },

    reRouteButtons: function(obj, e, eOpts) {
        if(this.Var('g', 'inApp') === 'false')
        {
            //gather data
            var name = obj.getId();

            //analysis
            if(name === 'guestbuttonid')
            {
                Ext.getCmp('usernameid').setValue('webform');
                Ext.getCmp('passwordid').setValue('inception01092000');
                this.cfn('log').executeLogIn();
            }
            else if(name === 'loginbuttonid')
            {
                this.cfn('log').executeLogIn();
            }
            else if(name === 'logoutbuttonid')
            {
                this.cfn('log').executeLogOut();
            }
            else if(name === 'settingsbuttonid' || name === 'settingsbuttonid2')
            {
                this.cfn('log').onSettingsEnterExit();
            }
            else if(name === 'settingsbackbuttonid')
            {
                this.cfn('log').onSettingsEnterExit(true);
            }
            else
            {
                console.log(name);
            }

        }
        else
        {
            var name = obj.getId();
            var splitObj = name.split('id_');
            splitname = splitObj[0];
            var id = 'id_' + splitObj[1];
            if(splitObj[1] === undefined)
            {
                id = this.Var('g', 'currentid');
            }
            else
            {
                if(splitname !== 'parentbutton')
                this.Var('g', 'currentid', id);
            }
            var type = this.Var('g', id);

            //rerouting
            if(name === 'confirmbuttonid')
            {
                this.cfn('mc').sendReport(id);
            }
            else if(name === 'declinebuttonid' || name === 'newreportbuttonid')
            {
                this.cfn('mc').destroyCanvas(name);
            }
            else if(name === 'dateokbuttonid')
            {
                this.cfn('mc').dateControl(id,'hide');
            }
            else if(name === 'timeokbuttonid')
            {
                this.cfn('mc').timeControl(id,'hide');
            }
            else if(name === 'singlebackbuttonid' || name === 'singleclearbuttonid')
            {
                this.cfn('mc').onSingle(id, type, name);
            }
            else if(name === 'multibackbuttonid' || name === 'multiokbuttonid')
            {
                this.cfn('mc').onMulti(id, type, name);
                //this.cfn('mc').onList(id, 'multi-back');
            }
            else if(name === 'multiotherbuttonid')
            {
                this.cfn('mc').onMulti(id, type, name);
            }
            else if(name === 'singleotherbuttonid')
            {
                this.cfn('mc').onSingle(id, type, name);
            }
            else if(splitname === 'parentbutton')
            {
                this.cfn('mc').fixParent(id, 'filter');
            }
            else if(name === 'customerrorbutton')
            {
                Ext.getCmp('customerrorid').hide();
            }
            else if(name.split('-').length === 3 && name.split('-')[0] === 'ext' && name.split('-')[1] === 'tab')
            {

            }
            else
            {
                console.log(name, splitObj, id, type);
            }
        }
    },

    reRouteMasks: function(obj, e, eOpts) {
        if(this.Var('g', 'inApp') !== 'false')
        {
            var name = obj.getId();
            var splitObj = name.split('id_');
            var splitname = splitObj[0];
            var id = 'id_' + splitObj[1];
            if(splitObj[1] === undefined)
            {
                id = this.Var('g', 'currentid');
            }
            else
            {
                this.Var('g', 'currentid', id);
            }
            var type = this.Var('g', id);
            if(splitname === 'datefieldmask')
            {
                this.cfn('mc').dateControl(id, 'show');
            }
            else if(splitname === 'timefieldmask')
            {
                this.cfn('mc').timeControl(id, 'show');
            }
            else if(splitname === 'singlefieldmask')
            {
                this.cfn('mc').onSingle(id, type, splitname);
            }
            else if(splitname === 'multimask')
            {
                this.cfn('mc').onMulti(id, type, splitname);//onList(id, 'multi');
            }
            else if(splitname === 'attachmentmask')
            {
                this.cfn('mc').onAttachment(id);
            }
            else
            {
                console.log(name, splitObj, id, type);
            }
        }
    },

    reRouteClear: function(obj, e, eOpts) {
        if(this.Var('g', 'inApp') === 'false')
        {
            var objId = obj.getId();

        }
        else
        {
            var name = obj.getId();
            var splitObj = name.split('id_');
            var splitname = splitObj[0];
            var id = 'id_' + splitObj[1];
            if(splitObj[1] === undefined)
            {
                id = this.Var('g', 'currentid');
            }
            else
            {
                this.Var('g', 'currentid', id);
            }
            var type = this.Var('g', id);

            //reroute
            if(splitname === 'singleclearbutton')
            {
                this.cfn('mc').onList(id, 'single-clear');
            }
            else if(splitname === 'dateclearbutton')
            {
                this.cfn('mc').dateControl(id, 'clear');
            }
            else if(splitname === 'timeclearbutton')
            {
                this.cfn('mc').timeControl(id, 'clear');
            }
            else if(splitname === 'attachmentimagefield')
            {
                this.cfn('mc').onAttachments(id);
            }
            else
            {
                console.log(name, splitname, id, type);
            }
        }
        //console.log(obj, objId, splitObj, id, type);
    },

    searchFn: function(obj, e, eOpts) {
        if(e.type === 'keyup' && obj.getValue() !== '')
        {
            if(this.Var('global', 'searchtime') !== 'true')
            {
                this.Var('global', 'searchtime', 'true');

                setTimeout(function(main){
                    main.Var('global', 'searchtime', 'false');
                    var store = Ext.getStore('datastoreid');
                    var id = main.Var('g', 'currentid');
                    var type = main.Var('global',id);
                    if(type.constructor !== Array)
                    {
                        main.cfn('mc').onDataStores(id, obj.getValue());
                    }
                    else
                    {
                        var datastore = Ext.getStore('datastoreid');
                        var linktype = datastore.getProxy().getUrl().split('&');
                        for(var i in linktype)
                        {
                            if(linktype[i].split('=')[0] === 'rt.pt.id')
                            {
                                var typeoflink = linktype[i].split('=')[1];
                            }
                        }
                        main.cfn('mc').onDataStores([parseInt(typeoflink)], obj.getValue());
                    }
                }, 1500, this);
            }
        }
        else
        {


            if(this.Var('g', this.Var('g', 'currentid')).constructor !== Array)
            {
                this.cfn('mc').onDataStores(this.Var('g', 'currentid'));
            }
            else
            {
                var datastore = Ext.getStore('datastoreid');
                var linktype = datastore.getProxy().getUrl().split('&');
                for(var i in linktype)
                {
                    if(linktype[i].split('=')[0] === 'rt.pt.id')
                    {
                        var typeoflink = linktype[i].split('=')[1];
                    }
                }
                this.cfn('mc').onDataStores([parseInt(typeoflink)]);
            }

        }
    },

    Var: function(storeid, id, value) {
        if(typeof(id) === 'string')
        {
            id = String(id).toUpperCase();
        }
        //for regular variables
        var storedata = null;
        if(storeid === 'g' || storeid === 'global')
        {
            storedata = {name: 'globalstoreid'};
        }
        else if(storeid === 'stat' || storeid === 'static')
        {
            storedata = {name: 'staticstoreid'};
        }
        else if(storeid === 'sett' || storeid === 'settings')
        {
            storedata = {name: 'settingsstoreid'};
        }

        //initialize aux config's
        else if(storeid === 'config')
        {
            storedata = {name: 'configstoreid'};
        }
        else
        {
            console.log('fn: Var: error: storeid not found. (vars: ', storedata, storeid, id, value,')');
            return;
        }
        var store = Ext.getStore(storedata.name);
        if(typeof(id) === 'object')
        {
            var obj = id;
            store.add({localid: obj.id, value: obj.value});
        }
        else
        {
            var storerecord = store.queryBy(function(record, recordid){
                if(record.data.localid === id)
                return true;
            });
            if(value === undefined )
            {
                if(storerecord.all.length === 0)
                {
                    return 'fail';
                }
                else
                {
                    return storerecord.all[0].data.value;
                }
            }
            else
            {
                if(storerecord.all.length === 0)
                {
                    this.Var(storeid, {id: id, value: value});
                }
                else
                {
                    store.on('removerecords', function(store, record){
                        Ext.getStore(storedata.name).add({localid: id, value: value});
                        //this.Var(storeid, {id: id, value: value});
                    }, this, {single: true});
                        store.remove(storerecord.all[0]);
                    }
                    return 'success';
                }
            }
    },

    fixStaticText: function(settings) {
        if(!settings)
        {
            Ext.getCmp('guestbuttonid').setText(this.Var('stat', 'button_guest'));
            Ext.getCmp('settingsbuttonid').setText(this.Var('stat', 'button_settings'));
            Ext.getCmp('loginbuttonid').setText(this.Var('stat', 'button_login'));
            Ext.getCmp('usernameid').setPlaceHolder(this.Var('stat', 'text_username'));
            Ext.getCmp('passwordid').setPlaceHolder(this.Var('stat', 'text_password'));
            if(Ext.getCmp('settingsbackbuttonid'))
            {
                Ext.getCmp('logoutbuttonid').setText(this.Var('stat', 'button_logout'));
                Ext.getCmp('settingsbackbuttonid').setText(this.Var('stat', 'button_back'));
            }
            if(Ext.getCmp('settingsbuttonid2'))
            {
                Ext.getCmp('settingsbuttonid2').setText(this.Var('stat', 'button_settings'));
            }
        }
        else if(settings === 1)
        {
            Ext.getCmp('logoutbuttonid').setText(this.Var('stat', 'button_logout'));
            Ext.getCmp('settingsbackbuttonid').setText(this.Var('stat', 'button_back'));
        }
        else if(settings === 2)
        {
            Ext.getCmp('settingsbuttonid2').setText(this.Var('stat', 'button_settings'));
        }
        else
        {
            console.log('fn: fixStaticText: settings value not found');
        }
    },

    switchCard: function(maincard, subcard, direction) {
        if(typeof(maincard) === 'string')
        {
            var maincard = Ext.getCmp(maincard);
        }
        if(typeof(subcard) === 'string')
        {
            var subcard = Ext.getCmp(subcard);
        }

        if(direction === undefined)
        {
            maincard.setActiveItem(subcard);
        }
        else
        {
            if(direction)
            {
                maincard.animateActiveItem(subcard, {type: 'slide', direction: 'left'});
            }
            else if(!direction)
            {
                maincard.animateActiveItem(subcard, {type: 'slide', direction: 'right'});
            }
        }
    },

    dataTransfer: function(id, store1, store2, configtype, configexclude, configinclude) {
        //make transfera

        if(configtype === 'add')
        {
            if(store1.constructor !== Array)
            {
                //gather requirements
                if(store1.getStoreId())
                {
                    var store1 = store1.data.all;
                }
                else if(store1.isXType('list'))
                {
                    var store1 = store1.getSelection();
                }
            }
            //add data
            if(configexclude)
            {
                var ar = [];
                for(var i in store1)
                {
                    var storedata = store1[i].data;
                    if(storedata.type !== configexclude)
                    {
                        ar[ar.length] = this.dataTransfer(id, storedata , undefined , 'recreateobj');
                        //ar[ar.length] = {id: storedata.id, type: storedata.type, value: storedata.value, parent_id: storedata.parent_id, parent_value: storedata.parent_value};
                    }
                }
                store2.add(ar);
            }
            else if(configinclude)
            {
                var ar = [];
                for(var i in store1)
                {
                    var storedata = store1[i].data;
                    if(storedata.type === configinclude)
                    {
                        ar[ar.length] = this.dataTransfer(id, storedata , undefined , 'recreateobj');
                        //ar[ar.length] = {id: storedata.id, type: storedata.type, value: storedata.value, parent_id: storedata.parent_id, parent_value: storedata.parent_value};
                    }
                }
                store2.add(ar);
            }
            else
            {
                var ar = [];
                for(var i in store1)
                {
                    var storedata = store1[i].data;
                    ar[ar.length] = this.dataTransfer(id, storedata , undefined , 'recreateobj');
                    //ar[ar.length] = {id: storedata.id, type: storedata.type, value: storedata.value, parent_id: storedata.parent_id, parent_value: storedata.parent_value};
                }
                store2.add(ar);
            }
        }

        else if(configtype === 'remove')
        {

            var ar = [];
            //remove all data
            if(!store2)
            {
                if(!configexclude)
                {
                    store1.removeAll();
                }
                //remove all data except one type
                else
                {
                    var store1data = store1.data.all;
                    for (var i in store1data)
                    {
                        var storedata = store1data[i].data;
                        if(storedata.type !== configexclude)
                        {
                            ar[ar.length] = store1data[i];
                        }
                    }
                    consol
                    store1.remove(ar);
                }
            }
            else
            {

                if(store2.constructor === Array)
                {
                    if(this.Var('global', 'p'+id))
                    {
                        for(var j in store2)
                        {
                            for (var i in store1.data.all)
                            {
                                var storedata = store1.data.all[i].data;
                                if(storedata.uniqueId === store2[j].data.uniqueId)//if(storedata.id === store2[j].data.id)
                                {
                                    ar[ar.length] = store1.data.all[i];
                                }
                            }
                            store1.remove(ar);
                        }
                    }
                    else
                    {
                        for(var j in store2)
                        {
                            for (var i in store1.data.all)
                            {
                                var storedata = store1.data.all[i].data;
                                if(storedata.uniqueId === store2[j].data.uniqueId)//if(storedata.id === store2[j].data.id)
                                {
                                    ar[ar.length] = store1.data.all[i];
                                }
                            }
                            store1.remove(ar);
                        }
                    }
                }

                else if(typeof(store2) === 'object')
                {
                    for (var i in store1.data.all)
                    {
                        var storedata = store1.data.all[i];
                        if(storedata.data.uniqueId === store2.data.uniqueId)//if(storedata.data.id === store2.data.id)
                        {
                            ar[ar.length] = storedata;
                        }
                    }
                    store1.remove(ar);

                }
                else
                {
                    var store1data = store1.data.all;
                    for (var i in store1data)
                    {
                        var storedata = store1data[i].data;

                        if(storedata.type === store2)
                        {
                            ar[ar.length] = store1data[i];
                        }
                        else
                        {}
                    }
                    store1.remove(ar);
                }
            }

        }

        else if(configtype === 'replace')
        {
            //switch the current data in store 2 with the data in store 1

            if(store1.constructor !== Array)
            {
                var store1 = store1.data.all;
            }

            store2.removeAll();
            for(var i in store1)
            {
                var storedata = store1[i].data;
                store2.add(this.dataTransfer(id, storedata , undefined , 'recreateobj'));
            }
        }

        else if(configtype === 'select')
        {
            if(!store2)
            {
                return 'n-a';
            }

            var storedata = null;
            if(store1.constructor !== Array)
            {
                if(store1.data.all)
                {
                    storedata = Ext.getStore(store1.getStoreId()).data.all;
                }
                else
                {
                    storedata = [store1];
                }
            }
            else
            {
                if(store1[0].data)
                {
                    storedata = store1;
                }
                else
                {
                    storedata = [];
                    for(var i in store1)
                    {
                        storedata[storedata.length] = {data:store1[i]};
                    }
                }
            }
            if(!configinclude)
            {
                if(!configexclude)
                {

                    var selectdata = Ext.getStore(store2.getStore().getStoreId()).queryBy(function(record, recordid){
                        for(var i in storedata)
                        {
                            if(storedata[i].data.uniqueId === record.data.uniqueId)//if(storedata[i].data.id === record.data.id)
                            {
                                return true;
                            }
                        }
                    }, this);
                    store2.deselectAll();
                    store2.select(selectdata.all, false);
                }
                else
                {
                    var selectdata = Ext.getStore(store2.getStore().getStoreId()).queryBy(function(record, recordid){
                        for(var i in storedata)
                        {
                            if(record.type !== configexclude)
                            {

                                if(storedata[i].data.uniqueId === record.data.uniqueId)//if(storedata[i].data.id === record.data.id)
                                {
                                    return true;
                                }
                            }
                        }

                    }, this);
                    store2.deselectAll();
                    store2.select(selectdata.all, false);
                }
            }
            else
            {
                if(configinclude.constructor === Array)
                {
                    var selectdata = Ext.getStore(store2.getStore().getStoreId()).queryBy(function(record, recordid){
                        for(var i in storedata)
                        {
                            for(var j in configinclude)
                            {
                                if(record.parent_id === configeinclude[j])
                                {
                                    if(storedata[i].data.id === record.data.id)
                                    {
                                        return true;
                                    }
                                }
                            }
                        }
                    }, this);

                    store2.deselectAll();
                    store2.select(selectdata.all, false);
                }
                else
                {
                    //console.log(Ext.getStore(store2.getStore().getStoreId()).data.all);
                    var selectdata = Ext.getStore(store2.getStore().getStoreId()).queryBy(function(record, recordid){
                        //console.log(record.data.type, typeof(record.data.type), configinclude, typeof(configinclude));
                        for(var i in storedata)
                        {
                            if(record.data.type === configinclude)
                            {
                                if(storedata[i].data.uniqueId === record.data.uniqueId)//if(storedata[i].data.id === record.data.id)
                                {
                                    return true;
                                }
                            }
                        }
                        return false;

                    }, this);
                    store2.deselectAll();
                    store2.select(selectdata.all, false);
                }
            }
        }
        else if(configtype === 'recreateobj')
        {
            var data = store1;
            var newdata = {};
            for(var i in data)
            {
                if(i !== 'uniqueId')
                {
                    if(typeof(data[i]) !== 'object')
                    {
                        newdata[i] = data[i];
                    }
                    else
                    {
                        newdata[i] = this.dataTransfer(id, data[i] , undefined , 'recreateobj');
                    }
                }
            }
            return newdata;

        }
    },

    loadingScreen: function(value) {

        setTimeout(function() {
            var view = Ext.Viewport;
            var loadingMask = Ext.getCmp('loadmaskid');
            if ((view.getMasked()=== null || view.getMasked()=== false) && !loadingMask){
                Ext.Viewport.setMasked({
                    xtype: 'loadmask',
                    id: 'loadmaskid',
                    message: value ? value : null,
                    indicator: true,
                    style: {background: 'rgba(10, 10, 10, 0.7) center center no-repeat', backgroundImage: 'url(resources/images/Untitled.png)'}
                });
            }
            else
            {
                if(loadingMask.isHidden())
                {
                    loadingMask.show();
                    //loadingMask.setMasked(true);
                }
                else
                {
                    loadingMask.hide();
                    //loadingMask.setMasked(false);
                }

            }
        }, 1);
    },

    customMsg: function(title, message, buttontype, msgfn, scope) {
        if(!buttontype)
        {
            var buttontype = 1;
        }

        var yestext = this.Var('stat', 'button_yes');
        var notext = this.Var('stat', 'button_no');
        var oktext = this.Var('stat', 'button_ok');
        var canceltext = this.Var('stat', 'button_cancel');

        var msgbox = Ext.getCmp('custommessagebox');
        if(!msgbox)
        {
            msgbox = new Ext.MessageBox({
                id: 'custommessagebox',
                styleHtmlContent: true,
                cls: 'msg-box-style'
            });
        }
        msgbox.setMaxWidth(null);
        msgbox.setWidth(null);
        msgbox.setMaxHeight(null);
        msgbox.setHeight(null);
        msgbox.setScrollable(false);
        if(typeof(title) === 'string')
        {
            var buttonset;
            if(buttontype === 1)
            {
                buttonset = [
                {text: oktext, itemId: 'ok', ui: 'main-button'}
                ];
            }
            else if(buttontype === 2)
            {
                buttonset = [
                {text: yestext, itemId: 'yes', ui: 'main-button'},
                {text: notext, itemId: 'no'}
                ];
            }
            else if(buttontype === 3)
            {
                buttonset = [
                {text: yestext, itemId: 'yes', ui: 'main-button'},
                {text: notext, itemId: 'no'},
                {text: canceltext, itemId: 'cancel'}
                ];
            }
            msgbox.show({
                buttons: buttonset,
                title: title,
                message: message,
                fn: msgfn,
                scope: scope
            });

            var height = msgbox.element.getHeight();
            if(Ext.os.is.Phone)
            {
                if(height > 200)
                {
                    if(height < 300)
                    {
                        msgbox.setWidth(300);
                        msgbox.setHeight(height + 50);
                        msgbox.setScrollable(false);
                        msgbox.setMaxHeight(600);
                        msgbox.setMaxWidth(600);
                        msgbox.innerItems[0].setStyle('text-align: left');
                    }
                    else
                    {
                        msgbox.setWidth(300);
                        msgbox.setHeight(300);
                        msgbox.setScrollable(true);
                        msgbox.setMaxHeight(600);
                        msgbox.setMaxWidth(600);
                        msgbox.innerItems[0].setStyle('text-align: left');
                    }
                }
                else
                {
                    msgbox.innerItems[0].setStyle('text-align: center');
                }
            }
            else
            {
                if(height > 200)
                {
                    if(height < 600)
                    {
                        msgbox.setWidth(500);
                        msgbox.setHeight(null);
                        msgbox.setMaxHeight(600);
                        msgbox.setMaxWidth(600);
                        msgbox.innerItems[0].setStyle('text-align: left');
                    }
                    else
                    {
                        msgbox.setWidth(500);
                        msgbox.setHeight(400);
                        msgbox.setScrollable(true);
                        msgbox.setMaxHeight(600);
                        msgbox.setMaxWidth(600);
                        msgbox.innerItems[0].setStyle('text-align: left');
                    }
                }
                else
                {
                    msgbox.innerItems[0].setStyle('text-align: center');
                }
            }
        }
        else
        {
            msgbox.show({
                buttons: {text: oktext, itemId: 'ok', ui: 'main-button'},
                title: fn.Var('stat', 'error_title'),
                message: fn.Var('stat', 'error_server')
            });

        }
    },

    cfn: function(id) {
        if(id === 'log')
        {
            return Incident.app.getController('LogInControl');
        }
        else if(id === 'temp')
        {
            return Incident.app.getController('TemplateControl');
        }
        else if(id === 'mc')
        {
            return Incident.app.getController('FieldsControl');
        }
    },

    isDebug: function() {
        this.Var('g', 'debug', 'true');

    },

    isRefresh: function() {
        this.Var('g', 'refresh', 'true');
        localStorage.clear();
        sessionStorage.clear();
    }

});
