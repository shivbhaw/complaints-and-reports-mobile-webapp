/*
 * File: app/controller/TemplateControl.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Incident.controller.TemplateControl', {
    extend: 'Ext.app.Controller',
    alias: 'controller.templatecontrol',

    config: {
    },

    init: function(application) {

    },

    launch: function() {

    },

    templateChoice: function(record) {
        var fn = this.fn();
        fn.loadingScreen();

        var newurl = fn.Var('sett', 'url-prefex') + '/json_dependency_files/templates/' + record.data.id + '.json';//fn.Var('sett', 'url-prefex') + '/servlet/reporttablet?rt.action=2&rt.template.id=' + record.data.id + '&rt.lang.id=' + this.fn().Var('sett', 'langvalue');
        var store = Ext.getStore('tabstoreid');
        store.setProxy({
            type: 'ajax',
            url: newurl,
            reader: {
                type: 'json',
                rootProperty: 'tabs'
            }
        });

        store.on('load', function(){
            fn.getCanvas();
            fn.getMainview().setItemId('template_'+record.data.id);
            fn.getMainview().setData(record.data.name);
            this.buildTemplate();
        }, this,
        {
            single: true
        });
        store.load(); 
    },

    buildTemplate: function() {
        var fn = this.fn();
        var isTablet = Ext.os.is.Tablet;
        var store = Ext.getStore('tabstoreid');
        var tabs = store.data.all;

        var canvas = Incident.view.Canvas();//fn.getCanvas();
        var maintabs = fn.getMaintabs();

        fn.Var('g', 'inApp', 'true');

        Ext.getCmp('confirmbuttonid').setText(fn.Var('stat','button_send'));
        Ext.getCmp('declinebuttonid').setText(fn.Var('stat','button_send_cancel'));

        var tabsArr = [];
        for(var i in tabs)
        {
            var newtabs;
            var tabsdata = tabs[i].data;
            var newtabs = this.createTabPanel(tabsdata.id, parseInt(i)+1);
            var sets = tabsdata.sets;
            for(var j in sets)
            {
                var setsdata = sets[j];
                if(setsdata.description === '' || setsdata.description === '-' || !setsdata.description)
                {
                    var instruction = null;
                }
                else
                {
                    var instruction = setsdata.description;
                }
                newtabs.add({
                    xtype: 'fieldset',
                    id: 'set'+setsdata.id,
                    title: setsdata.name,
                    instructions: instruction,
                    width: '100%',
                    defaults: {
                        required: false,
                        labelAlign: isTablet ? 'left' : 'top'
                    }
                });
                var fields = setsdata.field;
                for(var k in fields)
                {
                    this.createFields(fields[k], Ext.getCmp('set'+setsdata.id));
                }
            }
            tabsArr[tabsArr.length] = newtabs;
        }
        Ext.getCmp('maintabsid').removeAll();
        Ext.getCmp('maintabsid').add(tabsArr);   


        if(tabsArr.length === 1)
        {
            Ext.getCmp('maintabstabbarid').hide();
            if(!Ext.getCmp('templatetitleforsingle'))
            {
                fn.getMaintabs().add({
                    id:'templatetitleforsingle',
                    xtype: 'toolbar',
                    docked: 'top',
                    title: fn.getMainview().getData()
                });
            }
            else
            {
                Ext.getCmp('templatetitleforsingle').setTitle(fn.getMainview().getData());
            }
        }
        else
        {
            Ext.get('maintabsid').on('swipe', this.carouselConverter, this);
        }


        this.fixListButtons();

        //to switch car



        //on changing the view, the loading screen shall be closed
        /*Ext.Viewport.on('activeitemchange',function(){

        }, 
        this,
        {
        single: true
        }
        );*/

        //Ext.Viewport.setActiveItem(fn.getCanvas());//, {type: 'slide', direction: 'left'});
        fn.switchCard(fn.getCanvas(), fn.getMainview());
        fn.switchCard(Ext.Viewport, fn.getCanvas(), true);
        this.fn().loadingScreen();


    },

    createTabPanel: function(id, tabnumber, setid) {
        var isPhone = Ext.os.is.Phone;
        var tabpanel = Ext.create('Ext.Container',
            {
                requires:[
                'Ext.form.Panel',
                'Ext.form.FieldSet',
                'Ext.field.Text',
                'Ext.field.Password',
                'Ext.field.Email',
                'Ext.field.Url',
                'Ext.field.Checkbox',
                'Ext.field.Spinner',
                'Ext.field.Select',
                'Ext.field.Hidden',
                'Ext.field.TextArea',
                'Ext.field.Slider',
                'Ext.field.Toggle',
                'Ext.field.Radio',
                'Ext.field.DatePicker',
                'Ext.tab.Panel',
                'Ext.Button',
                'Ext.device.Camera',
                'Ext.SegmentedButton',
                'Ext.picker.Date',
                'Ext.Toolbar',
                'Ext.field.Search',
                'Ext.TitleBar',
                'Ext.field.Number'
                ],
                title: tabnumber,//isPhone ? tabnumber : 'Tab: ' + tabnumber,
                name: isPhone ? tabnumber : 'Tab: ' + tabnumber,
                itemId:  'tab'+ tabnumber,
                scrollable: 'vertical',
                padding: '0 10 0 10',
                id: isPhone ? 'tab' + id + '_' + setid : 'tab' + id
            });
        return tabpanel;
    },

    createFields: function(fielddata, fieldset) {
        var fn = this.fn();
        var fieldid = 'id_'+fielddata.id;
        var fieldname = fielddata.name;
        var fieldtype = fielddata.type;
        var configdata = fielddata.config[0];
        if(configdata.parent !== undefined)
        {
            fn.Var('g', 'p'+fieldid, configdata.parent);
            fn.Var('g', 'cid_'+configdata.parent, fieldid);
        }

        if(configdata.required === 'true')
        {

            fieldname = fieldname + '*';
            fn.Var('g', 'r'+fieldid, 'true');
        }
        else
        {
            fn.Var('g', 'r'+fieldid, 'fail');
        }

        if(configdata.defaultValues)
        var initialValue = this.assembleDefaultValues(fielddata);
        else
        var initialValue =  [null];

        var isDisabled = false;
        fn.Var('g', 'd'+fieldid, configdata.disabled);
        if(configdata.disabled === 'true')
        {
            isDisabled = true;
        }
        switch(fieldtype)
        {
            case 1:
            fieldset.add(
            {
                xtype: 'textfield',
                id: fieldid,
                label: fieldname,
                autoCapitalize: true,
                clearIcon: true,
                placeHolder: fn.Var('static', 'text_enter_text'),
                value: initialValue,
                disabled: isDisabled
            });
            break;
            case 2:
            fieldset.add({
                xtype: 'field',
                layout: 'fit',
                component: this.createDefault('date', fieldid, initialValue, undefined, isDisabled),
                id: fieldid ,
                disabled: isDisabled,
                label: fieldname
            });
            break;
            case 3:
            if(Ext.os.is.Tablet)
            var length = 117;
            else
            var length = 197;
            fieldset.add(
            {
                xtype: 'textareafield',
                id: fieldid,
                label: fieldname,
                placeHolder: fn.Var('static', 'text_enter_text'),
                autoCapitalize: true,
                scrollable: true,
                clearIcon: true,
                value: initialValue,
                disabled: isDisabled,
                height: length
            });
            break;
            case 4:
            fn.Var('g', fieldid, configdata.type);
            if(configdata.multiselect === 'false')
            {
                fieldset.add({
                    xtype: 'field',
                    layout: 'fit',
                    component: this.createDefault('single', fieldid, initialValue, undefined, isDisabled),
                    id: fieldid,
                    disabled: isDisabled,
                    label: fieldname
                });
            }
            else
            {
                //Creation of MultiList
                fieldset.add({
                    xtype: 'field',
                    layout: 'fit',
                    scrollable: false,
                    component: this.createMulti(fielddata, initialValue, isDisabled),
                    id: fieldid,
                    disabled: isDisabled,
                    label: fielddata.name
                });
            }
            break;
            case 5:
            var type = configdata.type;
            fn.Var('global', fieldid, type);

            //Creation of MultiLink
            fieldset.add({
                xtype: 'field',
                scrollable: false,
                component: this.createMulti(fielddata, initialValue, isDisabled),
                id: fieldid,
                disabled: isDisabled,
                label: fieldname
            });
            break;
            case 8:
            var type = configdata.type;
            fn.Var('global', fieldid, type);
            fieldset.add({
                xtype: 'field',
                layout: 'fit',
                disabled: isDisabled,
                scrollable: false,
                component: this.createDefault('single', fieldid, initialValue, undefined, isDisabled),//fieldid, type, 2, initial,isDisabled),
                id: fieldid,
                label: fieldname
            });
            break;
            case 9:
            try
            {
                var cam = Ext.device.Camera;
            }
            catch(err)
            {
                var cam = false;
            }

            if(cam)
            {
                fieldset.add({
                    xtype: 'field',
                    layout: 'fit',
                    component: this.createAttachments(fieldid),
                    id: fieldid ,
                    disabled: isDisabled,
                    label: fieldname
                });
            }
            else
            {
                fieldset.add({
                    xtype: 'textfield',
                    value: fn.Var('stat', 'na_attachments'),
                    disabled: true,
                    label: fieldname
                });
            }
            break;
            case 12:
            fieldset.add({
                xtype: 'field',
                layout: 'fit',
                component: this.createDefault('time', fieldid, initialValue, undefined, isDisabled),
                id: fieldid ,
                disabled: isDisabled,
                label: fieldname
            });
            break;
            case 14:
            if(fielddata.subtype !== 'spin')
            {
                fieldset.add(
                {
                    xtype: 'numberfield',
                    id: fieldid,
                    clearIcon: true,
                    label: fieldname,
                    disabled: isDisabled,
                    placeHolder: fn.Var('static', 'text_enter_text'),
                    value: initialValue
                });
            }
            else
            {
                fieldset.add(
                {
                    xtype: 'spinnerfield',
                    id: fieldid,
                    disabled: isDisabled,
                    label: fieldstoredata.data.name
                    //to set more configurations for spinner fields: minValue, maxValue, increment
                });
            }
            break;

            default:
            //Field for if not defined before
            if(fieldtype === 10)
            {
                var typename = fn.Var('stat', 'na_lookup');
            }
            else
            {
                var typename = fn.Var('stat', 'na_field');
            }
            fieldset.add({
                xtype: 'textfield',
                value: typename,
                disabled: true,
                label: fieldname
            });
            break;
        }
    },

    assembleDefaultValues: function(fielddata) {
        var type = fielddata.type;
        var dv = fielddata.config[0].defaultValues;
        var multi = fielddata.config[0].multiselect;
        var returndata = [];
        if(type === 1 || type === 3 || type === 14)
        {
            return dv ? dv : null;
        }
        else if(type === 2)
        {
            var dvdate = dv.split('-');
            return dv ? [{year: dvdate[0], month: dvdate[1], day: dvdate[2]}] : null;
            //return dv ? [{value: dv}] : null;
        }
        else if(type === 12)
        {
            var hour = (dv/100)/100;
            var minute = (dv/100) % 100;
            return dv ? [{hour: hour, min: minute}] : null;

        }
        else if(type === 4)
        {
            if(multi === 'true')
            {
                for(var i in dv)
                {
                    returndata[returndata.length] = {id: dv[i].id, type: dv[i].type, value: dv[i].value, parent_id: dv[i].parent_id, parent_value: dv[i].parent_value};
                }
            }
            else
            {
                dv = dv[0];
                returndata = [{id: dv.id, type: dv.type, value: dv.value, parent_id: dv.parent_id, parent_value: dv.parent_value}];
            }
        }
        else if(type === 5)
        {
            for(var i in dv)
            {
                returndata[returndata.length] = {id: dv[i].id, type: dv[i].type, value: dv[i].value, parent_id: dv[i].parent_id, parent_value: dv[i].parent_value};
            }
        }
        else if(type === 8)
        {
            var dv = dv[0];
            returndata = [{id: dv.id, value: dv.value, type: dv.type, parent_id: dv.parent_id, parent_value: dv.parent_value}];
        }
        return returndata;
    },

    carouselConverter: function(event, node, options, eOpts) {
        var fn = this.fn();
        var tabs = Ext.getCmp('maintabsid');
        if(event.direction === 'right')
        {
            var tabid = tabs.getActiveItem().getItemId().split('tab')[1];
            var tabno = parseInt(tabid);
            if(tabno === 1)
            tabno = fn.getMaintabs().innerItems.length;
            else
            tabno = tabno - 1;
            for(var i in tabs.innerItems)
            {
                var tabsinfo = tabs.innerItems[i];
                if(tabsinfo.getItemId() === 'tab'+String(tabno))
                {
                    fn.getMaintabs().animateActiveItem(tabs.innerItems[i], {type: 'slide', direction: 'right'});
                }
            }
        }
        else
        {
            var tabid = tabs.getActiveItem().getItemId().split('tab')[1];
            var tabno = parseInt(tabid);
            if(tabno === tabs.innerItems.length)
            tabno = 1;
            else
            tabno = tabno + 1;
            for(var i in tabs.innerItems)
            {
                var tabsinfo = tabs.innerItems[i];
                if(tabsinfo.getItemId() === 'tab'+String(tabno))
                {
                    fn.getMaintabs().animateActiveItem(tabs.innerItems[i], {type: 'slide', direction: 'left'});
                }
            }
        }
    },

    createDefault: function(type, id, initialValue, isLink, isDisabled) {

        var fn = this.fn();


        var newdata = null;
        var newvalue = '';

        if(isLink)
        {
            var type = fn.Var('g', id);
            if(type[0] === 4 && type.length === 0)
            {

            }
            else
            {
                newdata = initialValue;
                console.log(type);
                var linkname = fn.cfn('mc').getLinkNames(type)[0].value + ': ';
                newvalue = linkname + initialValue[0].value;
            }
        }
        else
        {
            if(type === 'single')
            {
                if(initialValue[0] !== null)
                {
                    newdata = initialValue;
                    newvalue = initialValue[0].value;
                }

            }
            else if(initialValue[0] !== null)
            {
                newdata = initialValue;
                if(type === 'date')
                {
                    var year = initialValue[0].year;
                    var month = initialValue[0].month;
                    var day = initialValue[0].day;
                    newvalue = new Date(year, month, day).toDateString();
                }
                else
                {
                    newvalue = initialValue[0].hour + ':' + initialValue[0].minute;
                }
                console.log(newdata, newvalue);
            }
        }
        var newfield = Ext.create('Ext.Container', {
            layout: 'vbox',
            width: '100%',
            items: [
            {
                id: type + 'clearbutton'+id,
                xtype: 'image',
                hidden: initialValue[0] === null || isDisabled,
                docked: 'right',
                cls: 'single-clear-icon1'
            },
            {
                xtype: 'textfield',
                readOnly: true,
                data: newdata,
                placeHolder:  fn.Var('static','text_click_to_add'),
                style: 'border-bottom:#FFFFFF',
                ui: 'text',
                value: newvalue,
                component: {
                    id: type+'fieldmask'+id,
                    useMask: !isDisabled
                },
                id: type + 'field'+id,
                //label: null,
                labelWidth: 0,
                //labelAlign: 'right',
                labelCls: 'x-form-labelfield'



            }]
        });

        return newfield;
    },

    createMulti: function(fielddata, initialValue, isDisabled) {

        var fn = this.fn();
        var id = 'id_'+fielddata.id;
        var fieldname = fielddata.name;
        var fieldtype = fielddata.type;
        var configdata = fielddata.config[0];
        var type = configdata.type;

        var multistore = Ext.getStore('multistore'+id);
        if(!multistore)
        {
            var multistore = Ext.create('Ext.data.Store',{
                autoLoad: true,
                autoSync: true,
                model: 'Incident.model.FieldData',
                storeId: 'multistore' + id,
                proxy: {
                    type: 'sessionstorage',
                    id: 'multistorage' + id
                }
            });
        }
        multistore.removeAll();

        if(initialValue[0] !== null)
        {
            multistore.add(initialValue);
        }

        console.log(configdata);
        if(type.constructor === Array)
        {
            /*var tpl = new Ext.XTemplate(
            '<div>',
            '<tpl if="type == 2">Functie: {value}',
            '<tpl elseif="type == 3">Afdeling: {value}',
            '<tpl elseif="type == 4">Other: {value}',
            '<tpl elseif="type == 14">Medewerker: {value}',
            '<tpl elseif="type == 15">Externe Medewerker: {value}',
            '<tpl elseif="type == 16">Externe Organisatie {value}',
            '<tpl else>Unknown: {value}</tpl></div>'
            );*/
            var tpl = '{value}';
        }
        else
        {
            var isParent = this.fn().Var('global', 'p'+id);
            var tpl = new Ext.XTemplate(( isParent !== 'fail' && isParent !== 'false') ? '{parent_value}: {value}' :'<strong>{value}</strong>');
        }

        var isHidden = false;
        if(multistore.data.all.length !== 0)
        {
            isHidden = true;
        }
        newmulti = Ext.create('Ext.Container', {
            layout: 'vbox',
            width: '100%',
            scrollable: false,
            items: [{
                xtype: 'textfield',
                labelWidth: 0,
                labelAlign: 'right',
                style: {'border-bottom':'#FFFFFF'},
                scrollable: false,
                readOnly: true,
                placeHolder: fn.Var('stat', 'text_click_to_add'),
                hidden: isHidden,
                id: 'multitext'+id,
                component: {
                    useMask: !isDisabled,
                    id: 'multimask'+id
                }

            },{
                xtype: 'list',
                pressedDelay: 0,
                disableSelection: true,
                height: '100%',
                scrollable: false,
                style: {'background':'#FFFFFF'},
                width: '100%',
                itemId: 'multi'+id,

                triggerEvent: isDisabled ? '' : 'itemtap',

                id: 'multi'+id,
                cls: 'removable-item',//(!isDisabled) ? 'removable-item' : 'disabled-list',
                itemTpl: tpl,
                store: 'multistore'+id,
                onItemDisclosure: !isDisabled
            }]
        });

        return newmulti;
    },

    createAttachments: function(id) {
        newattachment = Ext.create('Ext.Container', {
            layout: 'vbox',
            width: '100%',
            scrollable: false,
            items: [{
                xtype: 'textfield',
                labelWidth: 0,
                labelAlign: 'right',
                label: null,
                style: {'border-bottom':'#FFFFFF'},
                scrollable: false,
                readOnly: true,
                placeHolder: this.fn().Var('stat', 'text_click_to_add'),
                id: 'attachmenttextfield'+id,
                component: {
                    useMask: true,
                    id: 'attachmentmask'+id
                }

            },{
                xtype: 'img',
                id: 'attachmentimagefield'+id,
                width: 200,
                height: 200,
                hidden: true
            }]
        });

        return newattachment;
    },

    fixListButtons: function() {
        var fn = this.fn();
        Ext.getCmp('singlebackbuttonid').setText(fn.Var('stat', 'button_back'));
        Ext.getCmp('singleclearbuttonid').setText(fn.Var('stat', 'button_clear'));
        Ext.getCmp('multibackbuttonid').setText(fn.Var('stat', 'button_back'));
        Ext.getCmp('multiokbuttonid').setText(fn.Var('stat', 'button_ok'));
        Ext.getCmp('singleotherbuttonid').setText(fn.Var('stat', 'button_ok'));
        Ext.getCmp('multiotherbuttonid').setText(fn.Var('stat', 'button_ok'));
    },

    fn: function() {
        return Incident.app.getController('GlobalControl');
    }

});